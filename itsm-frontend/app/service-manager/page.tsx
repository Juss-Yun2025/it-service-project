"use client"

import React, { useState, useEffect, useMemo } from 'react'
import { useRouter } from 'next/navigation'
import Icon from '@/components/ui/Icon'
import { apiClient } from '@/lib/api'
import type { Stage, Department } from '@/lib/api'

function ServiceManagerPage() {
  // Î™®Îì† ÏÉÅÌÉú Î≥ÄÏàò ÏÑ†Ïñ∏ (ÏµúÏÉÅÎã®)
  const [selectedInquiry, setSelectedInquiry] = useState<any>(null)
  const [showGeneralInquiryEditModal, setShowGeneralInquiryEditModal] = useState(false)
  const [showGeneralInquiryDeleteModal, setShowGeneralInquiryDeleteModal] = useState(false)
  const [showGeneralInquiryReplyModal, setShowGeneralInquiryReplyModal] = useState(false)
  const [showFAQAddModal, setShowFAQAddModal] = useState(false)
  const [showFAQCompleteModal, setShowFAQCompleteModal] = useState(false)
  const [generalInquiryCurrentPage, setGeneralInquiryCurrentPage] = useState(1)
  const [showUnansweredOnly, setShowUnansweredOnly] = useState(false)
  const [generalInquirySearchStartDate, setGeneralInquirySearchStartDate] = useState('')
  const [generalInquirySearchEndDate, setGeneralInquirySearchEndDate] = useState('')
  const [showInfoSuccessModal, setShowInfoSuccessModal] = useState(false)
  const [showServiceWorkCompleteModal, setShowServiceWorkCompleteModal] = useState(false)
  const [showServiceWorkDeleteCompleteModal, setShowServiceWorkDeleteCompleteModal] = useState(false)
  const [faqCurrentPage, setFaqCurrentPage] = useState(1)
  const [selectedFAQ, setSelectedFAQ] = useState<any>(null)
  const [showFAQEditModal, setShowFAQEditModal] = useState(false)
  const [showGeneralInquiryStatus, setShowGeneralInquiryStatus] = useState(true)
  const [inquiryCurrentDepartment, setInquiryCurrentDepartment] = useState('Ï†ÑÏ≤¥ Î∂ÄÏÑú')
  const [showServiceWorkInfoModal, setShowServiceWorkInfoModal] = useState(false)
  const [showServiceWorkDeleteModal, setShowServiceWorkDeleteModal] = useState(false)
  const [serviceWorkTotalPages, setServiceWorkTotalPages] = useState(1)
  const [currentPassword, setCurrentPassword] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [paginatedServiceRequests, setPaginatedServiceRequests] = useState<ServiceRequest[]>([])
  const [selectedWorkRequest, setSelectedWorkRequest] = useState<ServiceRequest | null>(null)
  const [showServiceAssignmentModal, setShowServiceAssignmentModal] = useState(false)
  const [showServiceReassignmentModal, setShowServiceReassignmentModal] = useState(false)
  const [serviceWorkScheduledDate, setServiceWorkScheduledDate] = useState('')
  const [serviceWorkStartDate, setServiceWorkStartDate] = useState('')
  const [serviceWorkContent, setServiceWorkContent] = useState('')
  const [serviceWorkCompleteDate, setServiceWorkCompleteDate] = useState('')
  const [serviceWorkProblemIssue, setServiceWorkProblemIssue] = useState('')
  const [serviceWorkIsUnresolved, setServiceWorkIsUnresolved] = useState(false)
  const [serviceWorkCurrentStage, setServiceWorkCurrentStage] = useState('ÏòàÏ†ï')
  const [aggregationServiceStatistics, setAggregationServiceStatistics] = useState<any>(null)
  const [isUnresolved, setIsUnresolved] = useState(false)
  const [showApprovalSuccessModal, setShowApprovalSuccessModal] = useState(false)
  const router = useRouter()
  const [showServiceAggregation, setShowServiceAggregation] = useState(true)
  const [currentDepartment, setCurrentDepartment] = useState('')
  const [showServiceWorkList, setShowServiceWorkList] = useState(false)
  const [showFAQManagement, setShowFAQManagement] = useState(false)
  const [showGeneralInquiryList, setShowGeneralInquiryList] = useState(false)
  const [selectedRequest, setSelectedRequest] = useState<ServiceRequest | null>(null)
  const [showAssignmentModal, setShowAssignmentModal] = useState(false)
  const [showInfoModal, setShowInfoModal] = useState(false)
  const [inquiryStartDate, setInquiryStartDate] = useState(() => {
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    return oneWeekAgo.toISOString().split('T')[0];
  })
  const [inquiryEndDate, setInquiryEndDate] = useState(() => {
    return new Date().toISOString().split('T')[0];
  })
  const [inquirySelectedDepartment, setInquirySelectedDepartment] = useState('')
  const [inquiryData, setInquiryData] = useState({
    answered: 0,
    unanswered: 0,
    total: 0,
    completionRate: 0,
    avgResponseTime: 0
  })
  interface ManagerInfo {
    name: string;
    email: string;
    fullName: string;
    position: string;
    department: string;
    phone: string;
    createDate: string;
  }
  const [managerInfo, setManagerInfo] = useState<ManagerInfo>({
    name: '',
    email: '',
    fullName: '',
    position: '',
    department: '',
    phone: '',
    createDate: ''
  })
  const [currentUserId, setCurrentUserId] = useState<string | null>(null)
  const [departments, setDepartments] = useState<Department[]>([])
  const [departmentsLoading, setDepartmentsLoading] = useState<boolean>(false)
  const [stages, setStages] = useState<Stage[]>([])
  const [stageColors, setStageColors] = useState<{[key: string]: string}>({})
  const [serviceWorkSearchStartDate, setServiceWorkSearchStartDate] = useState('')
  const [serviceWorkSearchEndDate, setServiceWorkSearchEndDate] = useState('')
  const [showServiceIncompleteOnly, setShowServiceIncompleteOnly] = useState(false)
  const [serviceWorkSelectedDepartment, setServiceWorkSelectedDepartment] = useState('Ï†ÑÏ≤¥')
  const [serviceWorkCurrentPage, setServiceWorkCurrentPage] = useState(1)
  const [currentDate, setCurrentDate] = useState('')
  const [currentTime, setCurrentTime] = useState('')
  const [searchStartDate, setSearchStartDate] = useState('')
  const [searchEndDate, setSearchEndDate] = useState('')
  const [showWorkRegistrationInInfo, setShowWorkRegistrationInInfo] = useState(false)
  const [scheduledDate, setScheduledDate] = useState('')
  const [currentStage, setCurrentStage] = useState('ÏòàÏ†ï')
  const [workStartDate, setWorkStartDate] = useState('')
  const [workCompleteDate, setWorkCompleteDate] = useState('')
  const [workContent, setWorkContent] = useState('')
  const [problemIssue, setProblemIssue] = useState('')
  const [showRejectionSuccessModal, setShowRejectionSuccessModal] = useState(false)
  const [selectedDepartment, setSelectedDepartment] = useState('')
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [aggregationStartDate, setAggregationStartDate] = useState(() => {
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    return oneMonthAgo.toISOString().split('T')[0];
  })
  const [aggregationEndDate, setAggregationEndDate] = useState(() => {
    return new Date().toISOString().split('T')[0];
  })
  const [aggregationSelectedDepartment, setAggregationSelectedDepartment] = useState('')
  const [aggregationLoading, setAggregationLoading] = useState(false)
  const [aggregationServiceRequests, setAggregationServiceRequests] = useState<ServiceRequest[]>([])
  const [showIncompleteOnly, setShowIncompleteOnly] = useState(false)
  const [showRejectionModal, setShowRejectionModal] = useState(false)
  const [showRejectionInAssignment, setShowRejectionInAssignment] = useState(false)
  const [showInfoViewModal, setShowInfoViewModal] = useState(false)
  const [showWorkRegistrationModal, setShowWorkRegistrationModal] = useState(false)
  const [showWorkCompleteModal, setShowWorkCompleteModal] = useState(false)
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const [rejectionOpinion, setRejectionOpinion] = useState('')
  
  // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: ÏÑúÎπÑÏä§ ÏßëÍ≥Ñ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchAggregationServiceRequests = async () => {
    setAggregationLoading(true);
    try {
      const params = {
        startDate: aggregationStartDate,
        endDate: aggregationEndDate,
        department: aggregationSelectedDepartment !== '' ? aggregationSelectedDepartment : undefined,
        showIncompleteOnly: false, // ÏßëÍ≥Ñ ÌòÑÌô©ÏóêÏÑúÎäî Î™®Îì† ÏÉÅÌÉú Ìè¨Ìï®
        page: 1,
        limit: 1000 // ÏßëÍ≥ÑÏö©Ïù¥ÎØÄÎ°ú Ï∂©Î∂ÑÌïú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      };
      const response = await apiClient.getServiceRequests(params);
      if (response.success && response.data) {
        // API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Î•º ÌîÑÎ°†Ìä∏ÏóîÎìú ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        const transformedData = response.data.map((item: any) => mapServiceRequestData(item));
        setAggregationServiceRequests(transformedData);
      } else {
        console.error('Failed to fetch aggregation service requests:', response.error);
      }
    } catch (error) {
      console.error('Error fetching aggregation service requests:', error);
    } finally {
      setAggregationLoading(false);
    }
  };

  // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: ÏÑúÎπÑÏä§ ÏßëÍ≥Ñ ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchAggregationServiceStatistics = async () => {
    console.log('üîÑ fetchAggregationServiceStatistics ÏãúÏûë:', {
      aggregationStartDate,
      aggregationEndDate,
      aggregationSelectedDepartment,
      currentUserId,
      managerDepartment: managerInfo.department
    });
    try {
      const params = {
        startDate: aggregationStartDate,
        endDate: aggregationEndDate,
        department: aggregationSelectedDepartment !== '' ? aggregationSelectedDepartment : undefined,
        dateField: 'request_date' // Í≤ÄÏÉâ Í∏∞Ï§Ä Ïª¨Îüº Î≥ÄÍ≤Ω
      }
      console.log('üì° API Ìò∏Ï∂ú ÌååÎùºÎØ∏ÌÑ∞:', {
        ...params,
        departmentValue: aggregationSelectedDepartment,
        willSendDepartment: aggregationSelectedDepartment !== '' ? aggregationSelectedDepartment : 'undefined(Ï†ÑÏ≤¥Î∂ÄÏÑú)'
      });
      const response = await apiClient.getServiceStatistics(params)
      console.log('üìä API ÏùëÎãµ:', response);
      if (response.success && response.data) {
        setAggregationServiceStatistics(response.data)
        console.log('‚úÖ aggregationServiceStatistics ÏÑ§Ï†ïÎê®:', response.data);
        console.log('üîç ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:', {
          hasOverview: !!response.data.overview,
          overview: response.data.overview,
          allKeys: Object.keys(response.data),
          overviewKeys: response.data.overview ? Object.keys(response.data.overview) : []
        });
      } else {
        console.error('‚ùå API ÏùëÎãµ Ïã§Ìå®:', response);
      }
    } catch (e) {
      console.error('‚ùå ÏÑúÎπÑÏä§ ÏßëÍ≥ÑÌòÑÌô© ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', e)
    }
  }

  // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: stages Î°úÎìú Ìï®Ïàò
  const loadStages = async () => {
    console.log('üöÄ stages Î°úÎìú ÏãúÏûë');
    try {
      const response = await apiClient.getStages();
      if (response.success && response.data) {
        console.log('üìã stages Î°úÎìú ÏÑ±Í≥µ:', response.data);
        setStages(response.data);
        console.log('üéØ stages ÏÑ§Ï†ï ÏôÑÎ£å, length:', response.data.length);
      } else {
        console.error('‚ùå stages Î°úÎìú Ïã§Ìå®:', response.error);
      }
    } catch (error) {
      console.error('‚ùå stages Î°úÎìú Ï§ë Ïò§Î•ò:', error);
    }
  };

  // ÌäπÏ†ï Î∂ÄÏÑúÎ°ú ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ (Ï¥àÍ∏∞ Î°úÎìúÏö©)
  const fetchAggregationServiceStatisticsWithDepartment = async (departmentName: string) => {
    console.log('üîÑ fetchAggregationServiceStatisticsWithDepartment ÏãúÏûë:', {
      departmentName,
      aggregationStartDate,
      aggregationEndDate
    });
    try {
      const params = {
        startDate: aggregationStartDate,
        endDate: aggregationEndDate,
        department: departmentName !== '' ? departmentName : undefined
      }
      console.log('üì° ÏßÅÏ†ë Î∂ÄÏÑú API Ìò∏Ï∂ú ÌååÎùºÎØ∏ÌÑ∞:', {
        ...params,
        departmentValue: departmentName,
        willSendDepartment: departmentName !== '' ? departmentName : 'undefined(Ï†ÑÏ≤¥Î∂ÄÏÑú)'
      });
      const response = await apiClient.getServiceStatistics(params)
      console.log('üìä ÏßÅÏ†ë Î∂ÄÏÑú API ÏùëÎãµ:', response)
      if (response.success && response.data) {
        setAggregationServiceStatistics(response.data)
        console.log('‚úÖ ÏßÅÏ†ë Î∂ÄÏÑú aggregationServiceStatistics ÏÑ§Ï†ïÎê®:', response.data);
      } else {
        console.error('‚ùå ÏßÅÏ†ë Î∂ÄÏÑú API ÏùëÎãµ Ïã§Ìå®:', response);
      }
    } catch (e) {
      console.error('‚ùå ÏßÅÏ†ë Î∂ÄÏÑú ÏÑúÎπÑÏä§ ÏßëÍ≥ÑÌòÑÌô© ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', e)
    }
  };
  
  // ServiceRequest ÌÉÄÏûÖ Ï†ïÏùò
  interface ServiceRequest {
    id: any;
    requestNumber: any;
    title: any;
    currentStatus: any;
    requestDate: any;
    requestTime: any;
    requester: any;
    department: any;
    requesterDepartment: any;
    stage: any;
    assignTime: any;
    assignDate: any;
    description?: any;
    status?: any;
    priority?: any;
    assignedTo?: any;
    requestedBy?: any;
    workStartDate?: string;
    workCompleteDate?: string;
    workContent?: string;
    problemIssue?: string;
    isUnresolved?: boolean;
    completedBy?: string;
    stageId?: any;
    [key: string]: any;
  }
  
  const [serviceRequests, setServiceRequests] = useState<ServiceRequest[]>([])

  // PendingWork Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†ïÏùò
  interface PendingWork {
    id: string
    technician: string
    lastWeekPending: number
    longTermPending: number
  }

  // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú useEffect
  useEffect(() => {
    // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ìå®ÌÑ¥ Ï∞∏Í≥†: Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
    const userStr = window.localStorage.getItem('user');
    console.log('üîç localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò® ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', userStr);
    if (userStr) {
      const currentUser = JSON.parse(userStr);
      console.log('üë§ ÌååÏã±Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', currentUser);
      console.log('üè¢ ÏÇ¨Ïö©Ïûê Î∂ÄÏÑú:', currentUser.department);
      
      setCurrentUserId(currentUser.id || 'Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä');
      setManagerInfo({
        name: currentUser.name || '',
        email: currentUser.email || '',
        fullName: currentUser.name || '',
        position: currentUser.position || '',
        department: currentUser.department || 'Ï†ÑÏ≤¥ Î∂ÄÏÑú',
        phone: currentUser.phone || '',
        createDate: currentUser.created_at || ''
      });
      setCurrentDepartment(currentUser.department || 'Ï†ÑÏ≤¥ Î∂ÄÏÑú');
      // Í¥ÄÎ¶¨Îß§ÎãàÏ†ÄÎäî ÏÜåÏÜç Ï±ÖÏûÑÏûêÎ°ú ÏÜåÏÜç Ï°∞ÏπòÎã¥ÎãπÏûêÎì§Ïùò ÏóÖÎ¨¥Î•º Í¥ÄÎ¶¨Ìï† Î∂ÄÏÑú Í∂åÌïúÏùÑ Í∞ÄÏßÑÎã§
      const userDepartment = currentUser.department || '';
      console.log('üéØ ÏÑ§Ï†ïÌï† aggregationSelectedDepartment:', userDepartment);
      setAggregationSelectedDepartment(userDepartment);
    } else {
      console.log('‚ö†Ô∏è localStorageÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏùå');
      setCurrentUserId('Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä');
      setManagerInfo({
        name: 'Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä',
        email: '',
        fullName: 'Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä',
        position: '',
        department: 'Ï†ÑÏ≤¥ Î∂ÄÏÑú',
        phone: '',
        createDate: ''
      });
      setCurrentDepartment('Ï†ÑÏ≤¥ Î∂ÄÏÑú');
      setAggregationSelectedDepartment(''); // Í∏∞Î≥∏Í∞íÏùÄ Ï†ÑÏ≤¥ Î∂ÄÏÑú
    }
    // Í∑∏ÎûòÌîÑ(Í≤ÄÏÉâ) ÏùºÏûê Ï¥àÍ∏∞Í∞í: ÏµúÍ∑º Ìïú Îã¨
    const today = new Date();
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(today.getMonth() - 1);
    setSearchStartDate(oneMonthAgo.toISOString().split('T')[0]);
    setSearchEndDate(today.toISOString().split('T')[0]);
    
    // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï ÌõÑ ÏÑúÎπÑÏä§ ÌÜµÍ≥Ñ ÏûêÎèô Î°úÎìú
    setTimeout(() => {
      console.log('üöÄ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎî©');
      loadStages(); // stages Î®ºÏ†Ä Î°úÎìú
      fetchDepartments(); // departments Î°úÎìú
    }, 100);
    
    // Î∂ÄÏÑú ÏÑ§Ï†ïÏù¥ ÏôÑÎ£åÎêú ÌõÑ ÌÜµÍ≥Ñ Î°úÎìú (ÏÇ¨Ïö©Ïûê Î∂ÄÏÑúÍ∞í ÏßÅÏ†ë ÏÇ¨Ïö©)
    const userDepartment = userStr ? JSON.parse(userStr).department || '' : '';
    setTimeout(() => {
      console.log('üìä Î∂ÄÏÑú ÏÑ§Ï†ï ÏôÑÎ£å ÌõÑ ÌÜµÍ≥Ñ Î°úÎìú, ÏßÅÏ†ë ÏÇ¨Ïö©Ïûê Î∂ÄÏÑú:', userDepartment);
      // aggregationSelectedDepartment ÏÉÅÌÉúÍ∞í ÎåÄÏã† ÏßÅÏ†ë ÏÇ¨Ïö©Ïûê Î∂ÄÏÑúÍ∞í ÏÇ¨Ïö©
      fetchAggregationServiceStatisticsWithDepartment(userDepartment);
    }, 300);
  }, []);

  // Í≤ÄÏÉâ Ï°∞Í±¥ Î≥ÄÍ≤Ω Ïãú ÏûêÎèôÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ïû¨Ï°∞Ìöå
  useEffect(() => {
    if (stages.length > 0) {
      fetchAggregationServiceStatistics();
    }
  }, [aggregationStartDate, aggregationEndDate, aggregationSelectedDepartment]);

  // Î™®Îì† useState ÏÑ†Ïñ∏ (ÏµúÏÉÅÎã®)
  interface ManagerInfo {
    name: string;
    email: string;
    fullName: string;
    position: string;
    department: string;
    phone: string;
    createDate: string;
  }

  // ÎÇ†Ïßú ÌòïÏãùÌôî Ìï®Ïàò
  const formatDateTime = (dateString: string): string => {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  };

  // Î∂ÄÏÑú Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ìï®Ïàò
  const fetchDepartments = async () => {
    console.log('üè¢ fetchDepartments ÏãúÏûë');
    setDepartmentsLoading(true)
    try {
      const response = await apiClient.getDepartments()
      console.log('üè¢ Î∂ÄÏÑú API ÏùëÎãµ:', response);
      if (response.success && response.data) {
        setDepartments(response.data)
        console.log('‚úÖ departments ÏÑ§Ï†ïÎê®:', response.data);
      } else {
        console.error('‚ùå Failed to fetch departments:', response.error)
      }
    } catch (error) {
      console.error('‚ùå Error fetching departments:', error)
    } finally {
      setDepartmentsLoading(false)
    }
  }

  // Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ï†ïÏùò
  // ÏÑúÎπÑÏä§ ÏûëÏóÖ Í¥ÄÎ†® ÏÉÅÌÉú Î≥ÄÏàòÎì§ (Ïª¥Ìè¨ÎÑåÌä∏ ÏµúÏÉÅÎã®Ïóê ÏÑ†Ïñ∏)
  const filteredServiceRequests = useMemo(() => {
    return serviceRequests.filter((request) => {
      // ÎÇ†Ïßú ÌïÑÌÑ∞
      if (serviceWorkSearchStartDate && serviceWorkSearchEndDate) {
        const requestDate = new Date(request.requestDate.replace(/\./g, '-'));
        const startDate = new Date(serviceWorkSearchStartDate);
        const endDate = new Date(serviceWorkSearchEndDate);
        if (requestDate < startDate || requestDate > endDate) return false;
      }
      // ÎØ∏Í≤∞ ÏôÑÎ£å Ï°∞Ìöå ÌïÑÌÑ∞
      if (showServiceIncompleteOnly) {
        return request.stage !== 'ÏôÑÎ£å';
      }
      // Ï†ëÏàò/Ïû¨Î∞∞Ï†ï Îã®Í≥Ñ: Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
      if (request.stage === 'Ï†ëÏàò' || request.stage === 'Ïû¨Î∞∞Ï†ï') {
        return true;
      }
      // Í∏∞ÌÉÄ Îã®Í≥Ñ: Ï°∞ÏπòÏÜåÏÜç Í∏∞Ï§Ä ÌïÑÌÑ∞ÎßÅ
      if (serviceWorkSelectedDepartment !== 'Ï†ÑÏ≤¥') {
        return request.assigneeDepartment === serviceWorkSelectedDepartment;
      }
      // Ï†ÑÏ≤¥ ÏÑ†ÌÉù Ïãú Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
      return true;
    });
  }, [serviceRequests, serviceWorkSearchStartDate, serviceWorkSearchEndDate, showServiceIncompleteOnly, serviceWorkSelectedDepartment]);



// Îç∞Ïù¥ÌÑ∞ Îß§Ìïë Ìï®Ïàò (ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ï∞∏Í≥†)
const mapServiceRequestData = (rawData: any): ServiceRequest => {
  return {
    id: rawData.id?.toString() || '',
    requestNumber: rawData.request_number || '',
    title: rawData.title || '',
    currentStatus: rawData.current_status || '',
    requestDate: rawData.request_date || '',
    requestTime: rawData.request_time || '',
    requester: rawData.requester || '',
    department: rawData.department || '',
    requesterDepartment: rawData.requester_department || '',
    stage: rawData.stage || '',
    assignTime: rawData.assign_time || '',
    assignDate: rawData.assign_date || '',
    assignee: rawData.assignee || '',
    assigneeDepartment: rawData.assignee_department || '',
    technician: rawData.technician || '',
    technicianDepartment: rawData.technician_department || '',
    workStartDate: rawData.work_start_date || '',
    workStartTime: rawData.work_start_time || '',
    workCompleteDate: rawData.work_complete_date || '',
    workCompleteTime: rawData.work_complete_time || '',
    assignmentHours: rawData.assignment_hours || '',
    workHours: rawData.work_hours || '',
    content: rawData.content || '',
    contact: rawData.contact || '',
    location: rawData.location || '',
    actualRequester: rawData.actual_requester || '',
    actualContact: rawData.actual_contact || '',
    actualRequesterDepartment: rawData.actual_requester_department || '',
    serviceType: rawData.service_type || '',
    completionDate: rawData.completion_date || '',
    assignmentOpinion: rawData.assignment_opinion || '',
    previousAssignDate: rawData.previous_assign_date || '',
    previousAssignee: rawData.previous_assignee || '',
    previousAssignmentOpinion: rawData.previous_assignment_opinion || '',
    rejectionDate: rawData.rejection_date || '',
    rejectionOpinion: rawData.rejection_opinion || '',
    rejectionName: rawData.rejection_name || '',
    scheduledDate: rawData.scheduled_date || '',
    workContent: rawData.work_content || '',
    problemIssue: rawData.problem_issue || '',
    isUnresolved: rawData.is_unresolved || false,
    stageId: rawData.stage_id || 0
  };

  const [showServiceAggregation, setShowServiceAggregation] = useState(true)
  const [showGeneralInquiryStatus, setShowGeneralInquiryStatus] = useState(true)
  const [selectedDepartment, setSelectedDepartment] = useState('')
  const [currentDepartment, setCurrentDepartment] = useState('')
  // stages, stageColors, departments, departmentsLoadingÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îê®
  const [aggregationServiceStatistics, setAggregationServiceStatistics] = useState<any>(null)
  const [startDate, setStartDate] = useState(new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0])
  const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0])
  const [inquiryCurrentDepartment, setInquiryCurrentDepartment] = useState('Ï†ÑÏ≤¥ Î∂ÄÏÑú')
  const [chartData, setChartData] = useState({
    received: 0,
    assigned: 0,
    working: 0,
    completed: 0,
    failed: 0
  })
  const [inquiryData, setInquiryData] = useState({
    answered: 0,
    unanswered: 0,
    total: 0,
    completionRate: 0,
    avgResponseTime: 0
  })

  // ÌòÑÏû¨ ÎÇ†ÏßúÏôÄ ÏãúÍ∞Ñ ÏÑ§Ï†ï
  useEffect(() => {
    const updateDateTime = () => {
      const now = new Date()
      const dateStr = now.toLocaleDateString('ko-KR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      }).replace(/\./g, '.').replace(/\s/g, '')
      const timeStr = now.toLocaleTimeString('ko-KR', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      })
      setCurrentDate(dateStr)
      setCurrentTime(timeStr)
    }

    updateDateTime()
    const interval = setInterval(updateDateTime, 1000)
    return () => clearInterval(interval)
  }, [])

  // Í≤ÄÏÉâ Í∏∞Í∞Ñ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (2025.08.25 ~ 2025.08.31)
  useEffect(() => {
    // ÌòÑÏû¨ÏãúÏ†ê Í∏∞Ï§Ä 1Ï£ºÏùº ÏÑ§Ï†ï
    const today = new Date()
    const oneWeekAgo = new Date(today)
    oneWeekAgo.setDate(today.getDate() - 7)
    
    const formatDate = (date: Date) => {
      return date.toISOString().split('T')[0]
    }
    
    setSearchStartDate(formatDate(oneWeekAgo))
    setSearchEndDate(formatDate(today))
    setServiceWorkSearchStartDate(formatDate(oneWeekAgo))
    setServiceWorkSearchEndDate(formatDate(today))
  }, [])
  
  // Í≤ÄÏÉâ Ï°∞Í±¥ Î≥ÄÍ≤Ω Ïãú ÌéòÏù¥ÏßÄ Î¶¨ÏÖã
  useEffect(() => {
    setServiceWorkCurrentPage(1)
  }, [serviceWorkSearchStartDate, serviceWorkSearchEndDate, showServiceIncompleteOnly, serviceWorkSelectedDepartment])

  // Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î°ú Ï¥àÍ∏∞ ÏÑ§Ï†ï
  useEffect(() => {
    const user = apiClient.getCurrentUser();
    if (user) {
      setCurrentUserId(user.id);
      setManagerInfo({
        name: user.name || '',
        email: user.email || '',
        fullName: user.name || '',
        position: user.position || '',
        department: user.department || '',
        phone: (user as any).phone || '',
        createDate: user.created_at || ''
      });
      
      if (user.department) {
        setSelectedDepartment(user.department);
        setCurrentDepartment(user.department);
        // ÏùºÎ∞òÎ¨∏Ïùò ÌòÑÌô© Ï¥àÍ∏∞Í∞íÎèÑ Î°úÍ∑∏Ïù∏ ÏÜåÏÜçÏúºÎ°ú ÎèôÍ∏∞Ìôî
        setInquirySelectedDepartment(user.department);
        setInquiryCurrentDepartment(user.department);
      }
    }
  }, [])

  // Î∂ÄÏÑú Î™©Î°ù Î°úÎìú
  // Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îêú fetchDepartmentsÎßå ÏÇ¨Ïö©

  // Îã®Í≥Ñ Î™©Î°ù Î°úÎìú
  useEffect(() => {
    (async () => {
      console.log('üéØ stages Î°úÎìú ÏãúÏûë');
      try {
        const res = await apiClient.getStages();
        console.log('üìã stages API ÏùëÎãµ:', res);
        if (res.success && res.data) {
          console.log('‚úÖ stages Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï:', res.data);
          setStages(res.data);
          // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùºÌïú ÏÉâÏÉÅ Îß§Ìïë ÏÉùÏÑ±
          const colors: {[key: string]: string} = {}
          const colorMap: { [key: string]: string } = {
            'bg-purple-100 text-purple-800': '#8B5CF6',
            'bg-blue-100 text-blue-800': '#3B82F6',
            'bg-green-100 text-green-800': '#10B981',
            'bg-yellow-100 text-yellow-800': '#F59E0B',
            'bg-red-100 text-red-800': '#EF4444',
            'bg-gray-100 text-gray-800': '#6B7280',
            'bg-indigo-100 text-indigo-800': '#6366F1',
            'bg-pink-100 text-pink-800': '#EC4899',
          }
          res.data.forEach((st: any) => {
            if (st?.name && st?.color) {
              colors[st.name] = colorMap[st.color] || '#6B7280'
            }
          })
          setStageColors(colors)
        }
      } catch (e) {
        console.error('‚ùå Îã®Í≥Ñ Î™©Î°ù Î°úÎìú Ïã§Ìå®:', e);
        console.error('‚ùå stages Î°úÎìú ÏóêÎü¨ ÏÉÅÏÑ∏:', e);
      }
    })();
    fetchDepartments()
    
    // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: Ï¥àÍ∏∞ ÏßëÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎî©
    console.log('üöÄ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎî©');
    fetchAggregationServiceRequests();
    fetchAggregationServiceStatistics();
  }, [])

  // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: ÏßëÍ≥Ñ Ï°∞Í±¥ Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    fetchAggregationServiceRequests();
    fetchAggregationServiceStatistics();
  }, [aggregationStartDate, aggregationEndDate, aggregationSelectedDepartment]);

  // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: ÏÑúÎπÑÏä§ ÏßëÍ≥Ñ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchAggregationServiceRequests = async () => {
    setAggregationLoading(true);
    try {
      const params = {
        startDate: aggregationStartDate,
        endDate: aggregationEndDate,
        department: aggregationSelectedDepartment !== '' ? aggregationSelectedDepartment : undefined,
        showIncompleteOnly: false, // ÏßëÍ≥Ñ ÌòÑÌô©ÏóêÏÑúÎäî Î™®Îì† ÏÉÅÌÉú Ìè¨Ìï®
        page: 1,
        limit: 1000 // ÏßëÍ≥ÑÏö©Ïù¥ÎØÄÎ°ú Ï∂©Î∂ÑÌïú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      };
      const response = await apiClient.getServiceRequests(params);
      if (response.success && response.data) {
        // API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Î•º ÌîÑÎ°†Ìä∏ÏóîÎìú ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        const transformedData = response.data.map((item: any) => mapServiceRequestData(item));
        setAggregationServiceRequests(transformedData);
      } else {
        console.error('Failed to fetch aggregation service requests:', response.error);
      }
    } catch (error) {
      console.error('Error fetching aggregation service requests:', error);
    } finally {
      setAggregationLoading(false);
    }
  };

  // ÏÑúÎπÑÏä§ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞Îäî Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îê®
  // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞Îäî Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îê®
  // Î¨∏Ïùò Îç∞Ïù¥ÌÑ∞Îäî Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îê®

  // ÌòÑÏû¨ ÎÇ†ÏßúÏôÄ ÏãúÍ∞Ñ ÏÑ§Ï†ï
  useEffect(() => {
    const now = new Date()
    const dateStr = now.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).replace(/\./g, '.').replace(/ /g, '')
    
    const timeStr = now.toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    })
    
    setCurrentDate(dateStr)
    setCurrentTime(timeStr)
  }, [])

  // ÎØ∏Í≤∞ ÌòÑÌô© Îç∞Ïù¥ÌÑ∞
  // Ï§ëÎ≥µ ÏÑ†Ïñ∏ Ï†úÍ±∞Îê®

  // ÏÑúÎπÑÏä§ ÏûëÏóÖ Í¥ÄÎ†® ÏÉÅÌÉú Î≥ÄÏàòÎì§ÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îê®

  // ÏÑúÎπÑÏä§ ÏûëÏóÖ Î™©Î°ù ÌïÑÌÑ∞ÎßÅ Î∞è ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò (Ï§ëÎ≥µ Ï†úÍ±∞Îê®)

  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í≥ÑÏÇ∞
  // Î∂ÄÏÑú ÌïÑÌÑ∞Í∞Ä ÏÑ†ÌÉùÎêú Í≤ΩÏö∞(Ï†ÑÏ≤¥ Ï†úÏô∏)ÏóêÎäî Ìïú ÌéòÏù¥ÏßÄÏóê Î™®Îëê ÌëúÏãú
  // Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îêú ÎèôÏùº Î≥ÄÏàò ÏÇ¨Ïö©

  // ÎØ∏Í≤∞ ÌòÑÌô© Îç∞Ïù¥ÌÑ∞
  const [pendingWorksData, setPendingWorksData] = useState<PendingWork[]>([
    {
      id: '1',
      technician: 'ÍπÄÍ∏∞Ïà†',
      lastWeekPending: 0,
      longTermPending: 1
    }
  ])

  /*
  // ÌïòÎìúÏΩîÎî©Îêú Îç∞Ïù¥ÌÑ∞Îì§ - Ï∂îÌõÑ ÏôÑÏ†Ñ Ï†úÍ±∞ ÏòàÏ†ï
  */

  // ÎØ∏Í≤∞ ÌòÑÌô© Îç∞Ïù¥ÌÑ∞
  const pendingWorksFilter = useMemo(() => {
    return serviceWorkSelectedDepartment
  }, [
    serviceWorkSelectedDepartment
  ])

  // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
  console.log('Ï†ÑÏ≤¥ ÏÑúÎπÑÏä§ ÏöîÏ≤≠ Ïàò:', serviceRequests.length)
  console.log('ÌïÑÌÑ∞ Ï°∞Í±¥Îì§:', {
    serviceWorkSearchStartDate,
    serviceWorkSearchEndDate,
    showServiceIncompleteOnly,
    serviceWorkSelectedDepartment
  })
    
  // ÏÑúÎπÑÏä§ ÏûëÏóÖ Î™©Î°ù ÌïÑÌÑ∞ÎßÅ Î∞è ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
  // useMemo Í∏∞Î∞ò ÌïÑÌÑ∞ÎßÅ Î∞è ÌéòÏù¥ÏßïÎßå ÎÇ®ÍπÄ
  const filteredServiceRequests = useMemo(() => {
    return serviceRequests.filter((request) => {
      // ÎÇ†Ïßú ÌïÑÌÑ∞
      if (serviceWorkSearchStartDate && serviceWorkSearchEndDate) {
        const requestDate = new Date(request.requestDate.replace(/\./g, '-'));
        const startDate = new Date(serviceWorkSearchStartDate);
        const endDate = new Date(serviceWorkSearchEndDate);
        if (requestDate < startDate || requestDate > endDate) return false;
      }
      // ÎØ∏Í≤∞ ÏôÑÎ£å Ï°∞Ìöå ÌïÑÌÑ∞
      if (showServiceIncompleteOnly) {
        return request.stage !== 'ÏôÑÎ£å';
      }
      // Ï†ëÏàò/Ïû¨Î∞∞Ï†ï Îã®Í≥Ñ: Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
      if (request.stage === 'Ï†ëÏàò' || request.stage === 'Ïû¨Î∞∞Ï†ï') {
        return true;
      }
      // Í∏∞ÌÉÄ Îã®Í≥Ñ: Ï°∞ÏπòÏÜåÏÜç Í∏∞Ï§Ä ÌïÑÌÑ∞ÎßÅ
      if (serviceWorkSelectedDepartment !== 'Ï†ÑÏ≤¥') {
        return request.assigneeDepartment === serviceWorkSelectedDepartment;
      }
      // Ï†ÑÏ≤¥ ÏÑ†ÌÉù Ïãú Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
      return true;
    });
  }, [serviceRequests, serviceWorkSearchStartDate, serviceWorkSearchEndDate, showServiceIncompleteOnly, serviceWorkSelectedDepartment]);

  const serviceWorkItemsPerPage = serviceWorkSelectedDepartment !== 'Ï†ÑÏ≤¥' ? Math.max(1, filteredServiceRequests.length) : 10;
  const serviceWorkTotalPages = Math.max(1, Math.ceil(filteredServiceRequests.length / serviceWorkItemsPerPage));
  const serviceWorkStartIndex = (serviceWorkCurrentPage - 1) * serviceWorkItemsPerPage;
  const serviceWorkEndIndex = serviceWorkStartIndex + serviceWorkItemsPerPage;
  const paginatedServiceRequests = filteredServiceRequests.slice(serviceWorkStartIndex, serviceWorkEndIndex);
  
  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í≥ÑÏÇ∞

  // ÎØ∏Í≤∞ ÌòÑÌô© Îç∞Ïù¥ÌÑ∞
  const [pendingWorks, setPendingWorks] = useState<PendingWork[]>([
    {
      id: '1',
      technician: 'ÍπÄÍ∏∞Ïà†',
      lastWeekPending: 0,
      longTermPending: 1
    }
  ])

    setShowWorkRegistrationInInfo(true)
    // ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãúÏóê ÌòÑÏû¨ ÏãúÏ†ê ÏûêÎèô ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
    const now = new Date()
    const kstOffset = 9 * 60 // ÌïúÍµ≠ÏùÄ UTC+9
    const kstTime = new Date(now.getTime() + (kstOffset * 60 * 1000))
    const formattedNow = kstTime.toISOString().slice(0, 16)
    setScheduledDate(formattedNow)
  }

  // Îã®Í≥ÑÎ≥Ñ Ï≤òÎ¶¨ Ìï®ÏàòÎì§
  const handleScheduledProcess = () => {
    if (scheduledDate) {
      setCurrentStage('ÏûëÏóÖ') // ÏòàÏ†ï ‚Üí ÏûëÏóÖÏúºÎ°ú Î≥ÄÍ≤Ω
      // ÏûëÏóÖÏãúÏûëÏùºÏãúÏóê ÌòÑÏû¨ ÏãúÏ†ê ÏûêÎèô ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
      const now = new Date()
      const kstOffset = 9 * 60 // ÌïúÍµ≠ÏùÄ UTC+9
      const kstTime = new Date(now.getTime() + (kstOffset * 60 * 1000))
      const formattedNow = kstTime.toISOString().slice(0, 16)
      setWorkStartDate(formattedNow)
      console.log('ÏòàÏ†ï Îã®Í≥Ñ Ï≤òÎ¶¨:', scheduledDate)
      alert('ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãúÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§. ÏûëÏóÖ Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.')
    } else {
      alert('ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
    }
  }

  const handleWorkStartProcess = () => {
    if (workStartDate) {
      setCurrentStage('ÏôÑÎ£å') // ÏûëÏóÖ ‚Üí ÏôÑÎ£åÎ°ú Î≥ÄÍ≤Ω
      // ÏûëÏóÖÏôÑÎ£åÏùºÏãúÏóê ÌòÑÏû¨ ÏãúÏ†ê ÏûêÎèô ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
      const now = new Date()
      const kstOffset = 9 * 60 // ÌïúÍµ≠ÏùÄ UTC+9
      const kstTime = new Date(now.getTime() + (kstOffset * 60 * 1000))
      const formattedNow = kstTime.toISOString().slice(0, 16)
      setWorkCompleteDate(formattedNow)
      console.log('ÏûëÏóÖ ÏãúÏûë:', workStartDate)
      alert('ÏûëÏóÖÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§. ÏôÑÎ£å Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.')
    } else {
      alert('ÏûëÏóÖÏãúÏûëÏùºÏãúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
    }
  }

  const handleWorkCompleteProcess = () => {
    if (workCompleteDate && workContent) {
      setCurrentStage('ÎØ∏Í≤∞') // ÏôÑÎ£å ‚Üí ÎØ∏Í≤∞Î°ú Î≥ÄÍ≤Ω
      console.log('ÏûëÏóÖ ÏôÑÎ£å:', workCompleteDate, workContent)
      alert('ÏûëÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. ÎØ∏Í≤∞ Ï≤òÎ¶¨ Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.')
    } else {
      alert('ÏûëÏóÖÎÇ¥Ïó≠Í≥º ÏûëÏóÖÏôÑÎ£åÏùºÏãúÎ•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
    }
  }
  const handleUnresolvedProcess = () => {
    if (problemIssue) {
      setCurrentStage('ÎØ∏Í≤∞')
      // Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏Îßå ÏàòÌñâ
      console.log('ÎØ∏Í≤∞ Ï≤òÎ¶¨:', problemIssue)
      alert('ÎØ∏Í≤∞ Ï≤òÎ¶¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
    } else {
      alert('Î¨∏Ï†úÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
    }
  }

  const handleAssignmentConfirmSubmit = () => {
    if (selectedRequest) {
      // Î∞∞Ï†ïÌôïÏù∏ Î°úÏßÅ
      setServiceRequests(prev => 
        prev.map(req => 
          req.id === selectedRequest.id 
            ? { ...req, stage: 'ÌôïÏù∏' }
            : req
        )
      )
    }
    setShowAssignmentModal(false)
    setSelectedRequest(null)
  }

  const handleInfoSubmit = () => {
    if (selectedRequest) {
      // ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù Î°úÏßÅ
      setServiceRequests(prev => 
        prev.map(req => 
          req.id === selectedRequest.id 
            ? { ...req, stage: 'ÏûëÏóÖ', completionDate: new Date().toLocaleString('ko-KR') }
            : req
        )
      )
    }
    setShowInfoModal(false)
    setSelectedRequest(null)
  }

  const handleInfoChange = () => {
    setShowInfoModal(true)
  }

  // Î∞±ÏóîÎìú Í∏∞Î∞ò: ÏùºÎ∞òÎ¨∏Ïùò ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ Î∞è inquiryData Î∞òÏòÅ
  const fetchManagerInquiryStatistics = async () => {
    try {
      const params = {
        startDate: inquiryStartDate,
        endDate: inquiryEndDate,
        department: inquirySelectedDepartment || undefined
      }
      const response = await apiClient.getInquiryStatistics(params)
      if (response.success && response.data && response.data.overview) {
        const ov = response.data.overview
        const answered = parseInt(String(ov.answered_inquiries)) || 0
        const unanswered = parseInt(String(ov.pending_inquiries)) || 0
        const total = parseInt(String(ov.total_inquiries)) || (answered + unanswered)
        const completionRate = total > 0 ? Math.round((answered / total) * 1000) / 10 : 0
        const avgResponseTime = parseFloat(String(ov.avg_response_hours)) || 0
        setInquiryData({ answered, unanswered, total, completionRate, avgResponseTime })
      }
    } catch (e) {
      console.error('Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä ÏùºÎ∞òÎ¨∏Ïùò ÌÜµÍ≥Ñ Î°úÎìú Ïã§Ìå®:', e)
    }
  }

  // Î∂ÄÏÑúÎÇò ÎÇ†Ïßú Î≥ÄÍ≤Ω Ïãú Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    fetchAggregationServiceStatistics()
  }, [selectedDepartment, startDate, endDate])

  // ÏùºÎ∞òÎ¨∏ÏùòÌòÑÌô© Î∂ÄÏÑúÎÇò ÎÇ†Ïßú Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    fetchManagerInquiryStatistics()
  }, [inquirySelectedDepartment, inquiryStartDate, inquiryEndDate])

  // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ìï®Ïàò (Í≤ÄÏÉâ Ï°∞Í±¥ Ïú†ÏßÄ)
  const handleRefresh = () => {
    // ÌòÑÏû¨ Í≤ÄÏÉâ Ï°∞Í±¥ÏùÑ Ïú†ÏßÄÌïòÎ©¥ÏÑú Îç∞Ïù¥ÌÑ∞Îßå ÏÉàÎ°úÍ≥†Ïπ®
    console.log('Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® - Í≤ÄÏÉâ Ï°∞Í±¥ Ïú†ÏßÄ:', {
      searchStartDate,
      searchEndDate,
      showIncompleteOnly
    })
    
    // ÏÑúÎ≤ÑÏóêÏÑú ÏµúÏã† ÌÜµÍ≥Ñ Ïû¨Î°úÎìú
    fetchAggregationServiceStatistics()
    fetchManagerInquiryStatistics()
    
    // ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞±ÏùÑ ÏúÑÌïú Í∞ÑÎã®Ìïú ÏïåÎ¶º (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    // alert('Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÉàÎ°úÍ≥†Ïπ®ÎêòÏóàÏäµÎãàÎã§.')
  }

  const closeModal = () => {
    setShowAssignmentModal(false)
    setShowRejectionModal(false)
    setShowRejectionInAssignment(false)
    setShowInfoModal(false)
    setShowInfoViewModal(false)
    setShowWorkRegistrationModal(false)
    setShowWorkCompleteModal(false)
    setShowPasswordModal(false)
    setShowWorkRegistrationInInfo(false)
    setSelectedRequest(null)
    setRejectionOpinion('')
    // ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setScheduledDate('')
    setWorkStartDate('')
    setWorkContent('')
    setWorkCompleteDate('')
    setProblemIssue('')
    setIsUnresolved(false)
    setCurrentStage('ÏòàÏ†ï')
  }

  // Î∞∞Ï†ïÏäπÏù∏ Ï≤òÎ¶¨
  const handleAssignmentApprove = () => {
    if (selectedRequest) {
      setServiceRequests(prev => 
        prev.map(req => 
          req.id === selectedRequest.id 
            ? { ...req, stage: 'ÌôïÏù∏' }
            : req
        )
      )
    }
    setShowAssignmentModal(false)
    setShowApprovalSuccessModal(true)
    setSelectedRequest(null)
  }

  // Î∞∞Ï†ïÎ∞òÎ†§ Ï≤òÎ¶¨
  const handleAssignmentReject = () => {
    setShowRejectionInAssignment(true)
  }

  // ÏûëÏóÖ Îì±Î°ù Ï†ïÎ≥¥ Î™®Îã¨ ÌëúÏãú
  const handleWorkRegistrationInInfo = () => {
    setShowWorkRegistrationInInfo(true)
  }

  const handleFinalReject = () => {
    if (selectedRequest) {
      const now = new Date()
      const currentDateTime = now.toLocaleString('ko-KR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      }).replace(/\./g, '.').replace(/\s/g, ' ')

      setServiceRequests(prev =>
        prev.map(req =>
          req.id === selectedRequest.id
            ? {
                ...req,
                // ÌòÑÏû¨ Î∞∞Ï†ï Ï†ïÎ≥¥Î•º Ï†Ñ) Î∞∞Ï†ï Ï†ïÎ≥¥Î°ú Ïù¥Îèô
                previousAssignDate: req.assignDate,
                previousAssignee: req.assignee,
                previousAssignmentOpinion: req.assignmentOpinion,
                // ÌòÑÏû¨ Î∞∞Ï†ï Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
                assignDate: '',
                assignee: '',
                assignmentOpinion: '',
                // Î∞òÎ†§ Ï†ïÎ≥¥ ÏÑ§Ï†ï
                rejectionDate: currentDateTime,
                rejectionOpinion: rejectionOpinion,
                stage: 'Î∞òÎ†§'
              }
            : req
        )
      )
    }
    setShowRejectionInAssignment(false)
    setShowAssignmentModal(false)
    setShowRejectionSuccessModal(true) // Show rejection success modal
    setSelectedRequest(null)
    setRejectionOpinion('')
  }
  return (
    <div className="min-h-screen bg-gray-100 relative">
      {/* Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ */}
      <div 
        className="absolute inset-0 bg-cover bg-center bg-no-repeat"
        style={{
          backgroundImage: "url('/image/Î∞∞Í≤Ω_Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä_ÌéòÏù¥ÏßÄ.jpg')",
          opacity: 1.0
        }}
      />

      {/* Ìó§Îçî */}
      <div className="relative z-20">
        <div className="flex justify-between items-center p-8">
          <div className="flex items-center space-x-4">
            <div className="w-12 h-12 bg-white/10 rounded-lg flex items-center justify-center backdrop-blur-sm">
              <Icon name="laptop" size={24} className="text-white" />
                </div>
            <div>
              <h1 className="text-3xl font-bold text-white">IT Service Management</h1>
              <p className="text-gray-300 text-sm">ÌÜµÌï© IT ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <button
              onClick={() => router.push('/')}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 ease-out"
              style={{marginRight: '0px'}}
            >
              Î°úÍ∑∏ÏïÑÏõÉ
                    </button>
                </div>
              </div>
            </div>

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <main className="relative z-10">
        {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î∞è ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
        <div className="max-w-7xl mx-auto px-6 py-6 w-full">
          <div className="flex items-center justify-between mb-12">
            <div className="px-20 py-0 rounded-full -ml-72 smooth-hover animate-fade-in shadow-lg" style={{backgroundColor: '#D4B8F9', marginLeft: '-310px'}}>
              <span className="text-purple-800 font-medium" style={{fontSize: '14px'}}>Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä ({managerInfo.name})</span>
            </div>
          </div>
        </div>

        {/* ÏôÑÏ†ÑÌûà Î∂ÑÎ¶¨Îêú Ï†ïÎ≥¥Î≥ÄÍ≤Ω Î≤ÑÌäº */}
        <div className="absolute z-50" style={{top: '14px', right: '116px'}}>
          <button 
            onClick={handleInfoChange}
            className="text-black/70 hover:text-black transition-all duration-300 ease-out flex items-center space-x-2 button-smooth px-4 py-2 rounded-lg"
          >
            <Icon name="settings-gray" size={20} className="text-black hover:text-black" />
            <span>Ï†ïÎ≥¥ Î≥ÄÍ≤Ω</span>
                    </button>
        </div>

        {/* Î∂ÑÎ¶¨Îêú 3Í∞ú ÌîÑÎ†àÏûÑ */}
        <div className="max-w-7xl mx-auto px-6 py-6">
            
          {/* ÌîÑÎ†àÏûÑ 1: ÏÑúÎπÑÏä§ ÏßëÍ≥ÑÌòÑÌô© */}
          <div className="mb-6" style={{marginLeft: '-315px', marginTop: '-60px'}}>
            <div className="w-80" style={{width: '306px'}}>
              <div className="bg-white rounded-lg shadow-lg p-6 flex flex-col" style={{height: '650px', backgroundColor: 'rgba(255, 255, 255, 0.5)'}}>
                <div className="mb-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <button
                      onClick={() => {
                        fetchAggregationServiceRequests();
                        fetchAggregationServiceStatistics();
                      }}
                      className="w-6 h-6 text-gray-600 hover:text-gray-800 transition-colors"
                    >
                      <Icon name="refresh" size={16} />
                    </button>
                    <h3 className="text-lg font-bold text-gray-800">ÏÑúÎπÑÏä§ ÏßëÍ≥ÑÌòÑÌô©</h3>
                  </div>
                  <div className="flex justify-end" style={{marginTop: '30px'}}>
                    <button
                      onClick={() => setShowServiceAggregation(!showServiceAggregation)}
                      className={`w-8 h-4 rounded-full transition-colors ${
                        showServiceAggregation ? 'bg-green-500' : 'bg-gray-400'
                      }`}
                    >
                      <div className={`w-3 h-3 bg-white rounded-full transition-transform ${
                        showServiceAggregation ? 'translate-x-4' : 'translate-x-0.5'
                      }`} />
                    </button>
                  </div>
                </div>

                {showServiceAggregation && (
                  <>
                    {/* Î∂ÄÏÑú ÏÑ†ÌÉù */}
                    <div className="mb-4">
                      <select
                        value={aggregationSelectedDepartment}
                        onChange={(e) => {
                          setAggregationSelectedDepartment(e.target.value)
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                        disabled={departmentsLoading}
                      >
                        <option value="">Ï†ÑÏ≤¥ Î∂ÄÏÑú</option>
                        {departments.map((dept) => (
                          <option key={dept.id} value={dept.name}>
                            {dept.name}
                          </option>
                        ))}
                      </select>
                    </div>


                    {/* Í≤ÄÏÉâ Í∏∞Í∞Ñ ÏÑ†ÌÉù (ÌòÑÏû¨ÏãúÏ†ê 1Í∞úÏõî) */}
                    <div className="mb-4">
                      <div className="flex items-center space-x-1">
                        <input
                          type="date"
                          value={aggregationStartDate}
                          max={aggregationEndDate}
                          onChange={(e) => {
                            const newStart = e.target.value;
                            // ÏãúÏûëÏùºÏù¥ Ï¢ÖÎ£åÏùºÎ≥¥Îã§ ÌÅ¨Î©¥ Ï¢ÖÎ£åÏùºÎ°ú ÎßûÏ∂§
                            if (newStart > aggregationEndDate) {
                              setAggregationStartDate(aggregationEndDate);
                            } else {
                              setAggregationStartDate(newStart);
                            }
                          }}
                          className="w-full px-2 py-2 border border-gray-300 rounded-lg text-xs"
                        />
                        <span className="text-gray-500 text-sm">~</span>
                        <input
                          type="date"
                          value={aggregationEndDate}
                          min={aggregationStartDate}
                          onChange={(e) => {
                            const newEnd = e.target.value;
                            // Ï¢ÖÎ£åÏùºÏù¥ ÏãúÏûëÏùºÎ≥¥Îã§ ÏûëÏúºÎ©¥ ÏãúÏûëÏùºÎ°ú ÎßûÏ∂§
                            if (newEnd < aggregationStartDate) {
                              setAggregationEndDate(aggregationStartDate);
                            } else {
                              setAggregationEndDate(newEnd);
                            }
                          }}
                          className="w-full px-2 py-2 border border-gray-300 rounded-lg text-xs"
                        />
                      </div>
                    </div>

                    {/* Î∞òÏõê Ìò∏ Ï∞®Ìä∏ */}
                    <div className="flex items-center h-40" style={{marginTop: '100px'}}>
                      <div className="w-[400px] h-[400px] relative">
                        <svg viewBox="0 0 200 200" className="w-full h-full">
                          {(() => {
                            // Î†åÎçîÎßÅ ÏãúÏ†êÏóêÏÑú ÏßÅÏ†ë Í≥ÑÏÇ∞
                            let currentChartData: { [key: string]: number } = {};
                            
                            console.log('üé® Ï∞®Ìä∏ Î†åÎçîÎßÅ ÏãúÏûë:', {
                              hasAggregationServiceStatistics: !!aggregationServiceStatistics,
                              stagesLength: stages.length,
                              hasOverview: !!(aggregationServiceStatistics && aggregationServiceStatistics.overview),
                              aggregationServiceStatistics,
                              stages: stages.map(s => ({ id: s.id, name: s.name }))
                            });
                            
                            if (aggregationServiceStatistics && stages.length > 0 && aggregationServiceStatistics.overview) {
                              console.log('üîç overview Îç∞Ïù¥ÌÑ∞:', aggregationServiceStatistics.overview);
                              stages.forEach(stage => {
                                const key = stage.name;
                                const backendField = `stage_${stage.name}`;
                                const value = parseInt(aggregationServiceStatistics.overview[backendField]) || 0;
                                currentChartData[key] = value;
                                console.log(`üìä Îã®Í≥Ñ ${key}: ${backendField} = ${value} (overviewÏóêÏÑú Ï∞æÏùÄ Í∞í: ${aggregationServiceStatistics.overview[backendField]})`);
                              });
                            } else {
                              console.log('‚ö†Ô∏è Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Í±¥ Î∂àÏùºÏπò:', {
                                hasAggregationServiceStatistics: !!aggregationServiceStatistics,
                                stagesLength: stages.length,
                                hasOverview: !!(aggregationServiceStatistics && aggregationServiceStatistics.overview)
                              });
                            }
                            
                            console.log('Í∑∏ÎûòÌîÑ Î†åÎçîÎßÅ - ÏßÅÏ†ë Í≥ÑÏÇ∞Îêú chartData:', currentChartData);
                            const total = Object.values(currentChartData).reduce((sum, value) => sum + value, 0)
                            console.log('Í∑∏ÎûòÌîÑ Î†åÎçîÎßÅ - ÏßÅÏ†ë Í≥ÑÏÇ∞Îêú total:', total);

                            const radius = 120
                            const centerX = 150
                            const centerY = 100
                            
                            // totalÏù¥ 0Ïù¥Î©¥ Îπà Ï∞®Ìä∏ ÌëúÏãú
                            if (total === 0) {
                              return (
                                <text x={centerX} y={centerY} textAnchor="middle" className="text-gray-500 text-sm">
                                  Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå
                                </text>
                              )
                            }
                            
                            // Í∞Å ÏÑπÏÖòÏùò Í∞ÅÎèÑ Í≥ÑÏÇ∞ (180ÎèÑ Î∞òÏõê) - NaN Î∞©ÏßÄ (ÎèôÏ†Å Ï≤òÎ¶¨)
                            // stages ÌÖåÏù¥Î∏îÏóêÏÑú ÎèôÏ†ÅÏúºÎ°ú ÏÉâÏÉÅÍ≥º ÏàúÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
                            const stageColors: { [key: string]: string } = {};
                            stages.forEach(stage => {
                              // Tailwind CSS ÌÅ¥ÎûòÏä§Î™ÖÏùÑ hex ÏΩîÎìúÎ°ú Î≥ÄÌôò
                              const colorMap: { [key: string]: string } = {
                                'bg-purple-100 text-purple-800': '#8B5CF6',
                                'bg-blue-100 text-blue-800': '#3B82F6',
                                'bg-green-100 text-green-800': '#10B981',
                                'bg-yellow-100 text-yellow-800': '#F59E0B',
                                'bg-orange-100 text-orange-800': '#F97316',
                                'bg-red-100 text-red-800': '#EF4444',
                                'bg-indigo-100 text-indigo-800': '#6366F1'
                              };
                              stageColors[stage.name] = colorMap[stage.color || ''] || '#6B7280';
                            });

                            // stages ÌÖåÏù¥Î∏îÏùò id ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨ (Í∑∏ÎûòÌîÑÏö© - ÏúÑÏóêÏÑúÎ∂ÄÌÑ∞ Ï†ëÏàò‚ÜíÎØ∏Í≤∞)
                            const sortedStages = [...stages].sort((a, b) => a.id - b.id);
                            const stageData = sortedStages.map((stage, index) => {
                              const key = stage.name; // ÌïúÍ∏Ä Ïù¥Î¶ÑÏùÑ ÏßÅÏ†ë ÌÇ§Î°ú ÏÇ¨Ïö©
                              const value = currentChartData[key] || 0;
                              const result = {
                                key: key,
                                koreanName: stage.name,
                                value,
                                angle: total > 0 ? (value / total) * 180 : 0,
                                color: stageColors[stage.name],
                                order: stage.id // stages ÌÖåÏù¥Î∏îÏùò idÎ•º ÏàúÏÑúÎ°ú ÏÇ¨Ïö©
                              };
                              return result;
                            }).filter(stage => stage.value > 0); // Í∞íÏù¥ ÏûàÎäî Îã®Í≥ÑÎßå ÌëúÏãú

                            // Í∑πÏ¢åÌëúÎ•º ÏßÅÍµêÏ¢åÌëúÎ°ú Î≥ÄÌôò (180ÎèÑ ÌöåÏ†Ñ)
                            const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {
                              // Í∞ÅÎèÑÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏúºÎ©¥ Í∏∞Î≥∏Í∞í Î∞òÌôò
                              if (!isFinite(angleInDegrees)) {
                                return { x: centerX, y: centerY }
                              }
                              const angleInRadians = (angleInDegrees + 90) * Math.PI / 180.0
                              const x = centerX + (radius * Math.cos(angleInRadians))
                              const y = centerY + (radius * Math.sin(angleInRadians))
                              return { x, y }
                            };

                            // Ìò∏ Í∑∏Î¶¨Í∏∞ Ìï®Ïàò
                            const createArc = (key: string, startAngle: number, endAngle: number, color: string, strokeWidth = 48) => {
                              // Í∞ÅÎèÑÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏúºÎ©¥ Îπà path Î∞òÌôò
                              if (!isFinite(startAngle) || !isFinite(endAngle) || startAngle === endAngle) {
                                return null
                              }
                              const start = polarToCartesian(centerX, centerY, radius, endAngle)
                              const end = polarToCartesian(centerX, centerY, radius, startAngle)
                              // Ï¢åÌëúÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏúºÎ©¥ Îπà path Î∞òÌôò
                              if (!isFinite(start.x) || !isFinite(start.y) || !isFinite(end.x) || !isFinite(end.y)) {
                                return null
                              }
                              const largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1"
                              const d = [
                                "M", start.x, start.y,
                                "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y
                              ].join(" ")
                              return (
                                <path
                                  key={key}
                                  d={d}
                                  fill="none"
                                  stroke={color}
                                  strokeWidth={strokeWidth}
                                  strokeLinecap="round"
                                />
                              )
                            }

                            // Ìò∏ Í∑∏Î¶¨Í∏∞
                            let currentAngle = 0
                            const arcs = stageData.slice().reverse().map((stage) => {
                              if (stage.value === 0) return null;
                              const startAngle = currentAngle
                              const endAngle = currentAngle + stage.angle
                              currentAngle += stage.angle
                              return createArc(stage.key, startAngle, endAngle, stage.color)
                            })

                            return (
                              <>
                                {arcs}
                                {/* Ï§ëÏïô ÌÖçÏä§Ìä∏ Ï†úÍ±∞ */}
                              </>
                            )
                          })()}
                        </svg>

                        {/* Î≤îÎ°Ä Ïò§Î≤ÑÎ†àÏù¥ */}
                        <div className="absolute top-36 right-4 space-y-2 text-sm">
                        {/* ÎèôÏ†Å Î≤îÎ°Ä Î†åÎçîÎßÅ */}
                        {(() => {
                          // stagesÍ∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Î°úÎî© ÌëúÏãú
                          if (!stages || stages.length === 0) {
                            return (
                              <div className="text-gray-500 text-xs">
                                Î°úÎî© Ï§ë...
                              </div>
                            );
                          }

                          // stages ÌÖåÏù¥Î∏îÏóêÏÑú ÎèôÏ†ÅÏúºÎ°ú ÏÉâÏÉÅ Í∞ÄÏ†∏Ïò§Í∏∞
                          const stageColors: { [key: string]: string } = {};
                          stages.forEach(stage => {
                            // Tailwind CSS ÌÅ¥ÎûòÏä§Î™ÖÏùÑ hex ÏΩîÎìúÎ°ú Î≥ÄÌôò
                            const colorMap: { [key: string]: string } = {
                              'bg-purple-100 text-purple-800': '#8B5CF6',
                              'bg-blue-100 text-blue-800': '#3B82F6',
                              'bg-green-100 text-green-800': '#10B981',
                              'bg-yellow-100 text-yellow-800': '#F59E0B',
                              'bg-orange-100 text-orange-800': '#F97316',
                              'bg-red-100 text-red-800': '#EF4444',
                              'bg-indigo-100 text-indigo-800': '#6366F1'
                            };
                              stageColors[stage.name] = colorMap[stage.color ?? ''] || '#6B7280';
                          });

                          // Î≤îÎ°ÄÏö© Îç∞Ïù¥ÌÑ∞ÎèÑ ÏßÅÏ†ë Í≥ÑÏÇ∞
                          let legendChartData: { [key: string]: number } = {};
                          
                          if (aggregationServiceStatistics && stages.length > 0 && aggregationServiceStatistics.overview) {
                            stages.forEach(stage => {
                              const key = stage.name;
                              const backendField = `stage_${stage.name}`;
                              const value = parseInt(aggregationServiceStatistics.overview[backendField]) || 0;
                              legendChartData[key] = value;
                            });
                          }

                          // stages ÌÖåÏù¥Î∏îÏùò id ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨ÌïòÏó¨ Î≤îÎ°Ä ÏÉùÏÑ±
                          const sortedStages = [...stages].sort((a, b) => a.id - b.id);
                          
                          const stageData = sortedStages.map((stage) => {
                            const key = stage.name; // ÌïúÍ∏Ä Ïù¥Î¶ÑÏùÑ ÏßÅÏ†ë ÌÇ§Î°ú ÏÇ¨Ïö©
                            const value = legendChartData[key] || 0;
                            return {
                              key: key,
                              koreanName: stage.name,
                              value,
                              color: stageColors[stage.name]
                            };
                          }).filter(stage => stage.value > 0); // Í∞íÏù¥ ÏûàÎäî Îã®Í≥ÑÎßå ÌëúÏãú

                          return stageData.map((stage, index) => {
                            if (stage.value === 0) return null;

                            return (
                              <div key={stage.key} className="flex items-center space-x-2">
                                <div className="w-3 h-3 rounded-full" style={{ backgroundColor: stage.color }}></div>
                                <span className="text-gray-700 font-medium text-xs">
                                  {stage.koreanName}: {stage.value}
                                </span>
                              </div>
                            );
                          });
                        })()}
                        </div>

                      </div>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
          
          {/* ÌîÑÎ†àÏûÑ 2: ÏÑúÎπÑÏä§ÏÑ†ÌÉù */}
          <div className="mb-6" style={{marginLeft: '34px', marginTop: '-676px'}}>
            <div className="w-full" style={{maxWidth: '1170px'}}>
                <div className="bg-white rounded-lg shadow-lg p-6 flex flex-col" style={{
                  height: '652px', 
                  backgroundColor: 'rgba(255, 255, 255, 0)'
                }}>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-bold text-purple-900">ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨</h3>
                  <h3 className="text-sm text-purple-900">(ÏïÑÎûò ÏÑ†ÌÉùÌï≠Î™©ÏùÑ ÏÑ†ÌÉù ÌïòÏÑ∏Ïöî!)</h3>
                </div>

                {/* 3Í∞ÄÏßÄ Í¥ÄÎ¶¨ Ìï≠Î™© */}
                <div className="flex justify-center items-center gap-4 h-full">
                  {/* ÏÑúÎπÑÏä§ ÏûëÏóÖ List Í¥ÄÎ¶¨ - Ï¢åÏ∏°ÏóêÏÑú ÎÇ†ÏïÑÏò§Îäî Ïï†ÎãàÎ©îÏù¥ÏÖò */}
                  <div 
                    onClick={() => setShowServiceWorkList(true)}
                    className="bg-gray-800 rounded-lg p-6 cursor-pointer hover:bg-gray-700 hover:scale-105 transition-all duration-300 ease-in-out flex flex-col items-start justify-start animate-slide-in-left"
                    style={{
                      backgroundImage: `url('/image/ÏÑ†ÌÉù_ÏÑúÎπÑÏä§ÏûëÏóÖListÍ¥ÄÎ¶¨.jpg')`,
                      backgroundSize: '400px',
                      backgroundPosition: 'center',
                      width: '300px',
                      height: '400px',
                      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5), 0 10px 20px rgba(0, 0, 0, 0.3), 0 0 0 3px rgba(255, 255, 255, 0.3)',
                      border: '2px solid rgba(255, 255, 255, 0.2)',
                      animation: 'slideInLeft 0.8s ease-out forwards',
                      opacity: 0,
                      transform: 'translateX(-100px)'
                    }}
                  >
                    <div className="text-left">
                      <Icon name="laptop-white" className="text-white mb-4" />
                      <h4 className="text-white font-bold text-lg">ÏÑúÎπÑÏä§ ÏûëÏóÖ List Í¥ÄÎ¶¨</h4>
                    </div>
                  </div>

                  {/* ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏ Í¥ÄÎ¶¨ - ÏïÑÎûòÏ™ΩÏóêÏÑú ÎÇ†ÏïÑÏò§Îäî Ïï†ÎãàÎ©îÏù¥ÏÖò */}
                  <div 
                    onClick={() => setShowFAQManagement(true)}
                    className="bg-gray-800 rounded-lg p-6 cursor-pointer hover:bg-gray-700 hover:scale-105 transition-all duration-300 ease-in-out flex flex-col items-start justify-start animate-slide-in-bottom"
                    style={{
                      backgroundImage: `url('/image/ÏÑ†ÌÉù_ÏûêÏ£ºÌïòÎäîÏßàÎ¨∏Í¥ÄÎ¶¨.jpg')`,
                      backgroundSize: '750px',
                      backgroundPosition: 'center',
                      width: '300px',
                      height: '400px',
                      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5), 0 10px 20px rgba(0, 0, 0, 0.3), 0 0 0 3px rgba(255, 255, 255, 0.3)',
                      border: '2px solid rgba(255, 255, 255, 0.2)',
                      animation: 'slideInBottom 0.8s ease-out 0.2s forwards',
                      opacity: 0,
                      transform: 'translateY(100px)'
                    }}
                  >
                    <div className="text-left">
                      <Icon name="help-circle" size={48} className="text-white mb-4" />
                      <h4 className="text-white font-bold text-lg">ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏ Í¥ÄÎ¶¨</h4>
                    </div>
                  </div>

                  {/* ÏùºÎ∞òÎ¨∏Ïùò List Í¥ÄÎ¶¨ - Ïö∞Ï∏°ÏóêÏÑú ÎÇ†ÏïÑÏò§Îäî Ïï†ÎãàÎ©îÏù¥ÏÖò */}
                  <div 
                    onClick={() => setShowGeneralInquiryList(true)}
                    className="bg-gray-800 rounded-lg p-6 cursor-pointer hover:bg-gray-700 hover:scale-105 transition-all duration-300 ease-in-out flex flex-col items-start justify-start animate-slide-in-right"
                    style={{
                      backgroundImage: `url('/image/ÏÑ†ÌÉù_ÏùºÎ∞òÎ¨∏ÏùòListÍ¥ÄÎ¶¨.jpg')`,
                      backgroundSize: '600px',
                      backgroundPosition: 'center',
                      width: '300px',
                      height: '400px',
                      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5), 0 10px 20px rgba(0, 0, 0, 0.3), 0 0 0 3px rgba(255, 255, 255, 0.3)',
                      border: '2px solid rgba(255, 255, 255, 0.2)',
                      animation: 'slideInRight 0.8s ease-out 0.4s forwards',
                      opacity: 0,
                      transform: 'translateX(100px)'
                    }}
                  >
                    <div className="text-left">
                      <Icon name="message-square" size={48} className="text-white mb-4" />
                      <h4 className="text-white font-bold text-lg">ÏùºÎ∞òÎ¨∏Ïùò List Í¥ÄÎ¶¨</h4>
                    </div>
                  </div>
                </div>

              </div>
            </div>
          </div>

          {/* ÏÑúÎπÑÏä§ÏûëÏóÖ List Í¥ÄÎ¶¨ ÌîÑÎ†àÏûÑ */}
          {showServiceWorkList && (
            <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
              <div className="bg-white rounded-lg shadow-xl max-w-7xl w-full mx-4 max-h-[90vh] overflow-hidden">
                {/* Î™®Îã¨ Ìó§Îçî */}
                <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200">
                  <div className="flex items-center space-x-4">
                    <button
                      onClick={() => {/* ÏÉàÎ°úÍ≥†Ïπ® Î°úÏßÅ */}}
                      className="w-6 h-6 text-gray-600 hover:text-gray-800 transition-colors"
                    >
                      <Icon name="refresh" size={16} />
                    </button>
                    <h2 className="text-xl font-bold text-gray-800">ÏÑúÎπÑÏä§ ÏûëÏóÖ Ï≤òÎ¶¨ ÌòÑÌô©</h2>
                  </div>
                  <button
                    onClick={() => setShowServiceWorkList(false)}
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    <Icon name="close" size={24} />
                  </button>
                </div>

                {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ ÏòÅÏó≠ */}
                <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-4">
                      {/* ÎÇ†Ïßú ÏÑ†ÌÉù */}
                      <div className="flex items-center space-x-2">
                        <input
                          type="date"
                          value={serviceWorkSearchStartDate}
                          onChange={(e) => setServiceWorkSearchStartDate(e.target.value)}
                          className="px-3 py-2 border-2 border-gray-400 rounded-lg text-sm font-medium bg-white shadow-sm focus:border-blue-500 focus:outline-none"
                        />
                        <span className="text-gray-600 font-medium">~</span>
                        <input
                          type="date"
                          value={serviceWorkSearchEndDate}
                          onChange={(e) => setServiceWorkSearchEndDate(e.target.value)}
                          className="px-3 py-2 border-2 border-gray-400 rounded-lg text-sm font-medium bg-white shadow-sm focus:border-blue-500 focus:outline-none"
                        />
                      </div>
                      
                      {/* Î∂ÄÏÑú ÏÑ†ÌÉù */}
                      <select
                        value={serviceWorkSelectedDepartment}
                        onChange={(e) => setServiceWorkSelectedDepartment(e.target.value)}
                        className="px-3 py-2 border-2 border-gray-400 rounded-lg text-sm font-medium bg-white shadow-sm focus:border-blue-500 focus:outline-none"
                      >
                        <option value="Ï†ÑÏ≤¥">Ï†ÑÏ≤¥</option>
                        <option value="ITÌåÄ">ITÌåÄ</option>
                        <option value="Ïö¥ÏòÅÌåÄ">Ïö¥ÏòÅÌåÄ</option>
                        <option value="Í∞úÎ∞úÌåÄ">Í∞úÎ∞úÌåÄ</option>
                        <option value="Î≥¥ÏïàÌåÄ">Î≥¥ÏïàÌåÄ</option>
                        <option value="Ïù∏ÏÇ¨ÌåÄ">Ïù∏ÏÇ¨ÌåÄ</option>
                        <option value="Ïû¨Î¨¥ÌåÄ">Ïû¨Î¨¥ÌåÄ</option>
                      </select>
                    </div>
                    
                    {/* ÎØ∏Í≤∞ÏôÑÎ£åÏ°∞Ìöå ÌÜ†Í∏Ä - Ïö∞Ï∏° ÎÅù Î∞∞Ïπò */}
                    <div className="flex items-center space-x-3">
                      <span className="text-sm font-medium text-gray-700">ÎØ∏Í≤∞ÏôÑÎ£åÏ°∞Ìöå</span>
                      <button
                        onClick={() => setShowServiceIncompleteOnly(!showServiceIncompleteOnly)}
                        className={`w-8 h-4 rounded-full transition-colors ${
                          showServiceIncompleteOnly ? 'bg-green-500' : 'bg-gray-400'
                        }`}
                      >
                        <div className={`w-3 h-3 bg-white rounded-full transition-transform ${
                          showServiceIncompleteOnly ? 'translate-x-4' : 'translate-x-0.5'
                        }`} />
                      </button>
                    </div>
                  </div>
                </div>

                {/* ÌÖåÏù¥Î∏î ÏòÅÏó≠ */}
                <div className="flex-1 overflow-hidden">
                  <div className="overflow-x-auto overflow-y-auto px-4" style={{height: '450px'}}>
                    <table className="w-full text-sm">
                      <thead className="sticky top-0" style={{backgroundColor: '#D4B8F9'}}>
                        <tr>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ïã†Ï≤≠Î≤àÌò∏</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ïã†Ï≤≠ÏãúÍ∞Ñ</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ïã†Ï≤≠Ï†úÎ™©</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">ÌòÑÏû¨ÏÉÅÌÉú</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ïã†Ï≤≠Ïûê</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ïã†Ï≤≠ÏÜåÏÜç</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Î∞∞Ï†ïÏãúÍ∞Ñ</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Îã®Í≥Ñ</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ï°∞ÏπòÏûê</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Ï°∞ÏπòÏÜåÏÜç</th>
                          <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Í¥ÄÎ¶¨</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {paginatedServiceRequests.map((request) => (
                          <tr key={request.id} className="hover:bg-gray-50">
                            <td className="px-2 py-2 text-gray-900 text-center">{request.requestNumber}</td>
                            <td className="px-2 py-2 text-gray-900 text-center">{request.requestTime || '13:00'}</td>
                            <td className="px-2 py-2 text-gray-900">{request.title}</td>
                            <td className="px-2 py-2 text-center">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                request.currentStatus === 'Ï†ïÏÉÅÏûëÎèô' ? 'bg-green-100 text-green-800' :
                                request.currentStatus === 'Ïò§Î•òÎ∞úÏÉù' ? 'bg-red-100 text-red-800' :
                                request.currentStatus === 'Î©îÏãúÏßÄÏ∞Ω' ? 'bg-blue-100 text-blue-800' :
                                request.currentStatus === 'Î∂ÄÎ∂ÑÎ∂àÎä•' ? 'bg-yellow-100 text-yellow-800' :
                                request.currentStatus === 'Ï†ÑÏ≤¥Î∂àÎä•' ? 'bg-red-200 text-red-900' :
                                request.currentStatus === 'Ï†êÍ≤ÄÏöîÏ≤≠' ? 'bg-purple-100 text-purple-800' :
                                request.currentStatus === 'Í∏∞ÌÉÄÏÉÅÌÉú' ? 'bg-gray-100 text-gray-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {request.currentStatus}
                              </span>
                            </td>
                            <td className="px-2 py-2 text-gray-900 text-center">{request.requester}</td>
                            <td className="px-2 py-2 text-gray-900 text-center">{request.department}</td>
                            <td className="px-2 py-2 text-gray-900 text-center">{request.assignTime || '13:10'}</td>
                            <td className="px-2 py-2 text-center">
                              <div className="flex items-center justify-center">
                                {request.stage === 'Ï†ëÏàò' && <Icon name="user" size={16} className="text-blue-600" />}
                                {request.stage === 'Î∞∞Ï†ï' && <Icon name="check" size={16} className="text-green-600" />}
                                {request.stage === 'Ïû¨Î∞∞Ï†ï' && <Icon name="refresh-cw" size={16} className="text-orange-600" />}
                                {request.stage === 'ÌôïÏù∏' && <Icon name="eye" size={16} className="text-purple-600" />}
                                {request.stage === 'ÏòàÏ†ï' && <Icon name="calendar" size={16} className="text-indigo-600" />}
                                {request.stage === 'ÏûëÏóÖ' && <Icon name="settings" size={16} className="text-yellow-600" />}
                                {request.stage === 'ÏôÑÎ£å' && <Icon name="check-circle" size={16} className="text-green-600" />}
                                {request.stage === 'ÎØ∏Í≤∞' && <Icon name="x-circle" size={16} className="text-red-600" />}
                                <span className="ml-1 text-gray-900">{request.stage}</span>
                              </div>
                            </td>
                            <td className="px-2 py-2 text-gray-900 text-center">{request.assignee || '-'}</td>
                            <td className="px-2 py-2 text-gray-900 text-center">{request.assigneeDepartment || '-'}</td>
                            <td className="px-2 py-2 text-center">
                              <div className="flex space-x-1 justify-center">
                                {/* Ï†ëÏàò Îã®Í≥Ñ: Ï°∞ÏπòÎã¥ÎãπÏûê ÎØ∏ÌôïÏ†ï - Î∞∞Ï†ïÏûëÏóÖ Î≤ÑÌäº */}
                                {request.stage === 'Ï†ëÏàò' && (
                                  <button
                                    onClick={() => {
                                      setSelectedWorkRequest(request);
                                      setShowServiceAssignmentModal(true);
                                    }}
                                    className="px-2 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600 transition-colors"
                                  >
                                    Î∞∞Ï†ïÏûëÏóÖ
                                  </button>
                                )}

                                {/* Ïû¨Î∞∞Ï†ï Îã®Í≥Ñ: Ï°∞ÏπòÎã¥ÎãπÏûê ÎØ∏ÌôïÏ†ï - Ïû¨Î∞∞Ï†ïÏûëÏóÖ Î≤ÑÌäº */}
                                {request.stage === 'Ïû¨Î∞∞Ï†ï' && (
                                  <button
                                    onClick={() => {
                                      setSelectedWorkRequest(request);
                                      setShowServiceReassignmentModal(true);
                                    }}
                                    className="px-2 py-1 bg-orange-500 text-white rounded text-xs hover:bg-orange-600 transition-colors"
                                  >
                                    Ïû¨Î∞∞Ï†ïÏûëÏóÖ
                                  </button>
                                )}

                                {/* Î∞∞Ï†ï/ÌôïÏù∏/ÏòàÏ†ï/ÏûëÏóÖ/ÏôÑÎ£å/ÎØ∏Í≤∞ Îã®Í≥Ñ: Ï°∞ÏπòÎã¥ÎãπÏûê ÌôïÏ†ï - ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäº (Í¥ÄÎ¶¨Îß§ÎãàÏ†Ä ÏÜåÏÜçÎßå) */}
                                {(request.stage === 'Î∞∞Ï†ï' || request.stage === 'ÌôïÏù∏' || request.stage === 'ÏòàÏ†ï' || 
                                  request.stage === 'ÏûëÏóÖ' || request.stage === 'ÏôÑÎ£å' || request.stage === 'ÎØ∏Í≤∞') && 
                                  request.assigneeDepartment === 'ITÌåÄ' && (
                                  <>
                                    <button
                                      onClick={() => {
                                        setSelectedWorkRequest(request);
                                        
                                        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Î∂àÎü¨Ïò§Í∏∞, ÏóÜÏúºÎ©¥ ÌòÑÏû¨ ÏãúÏ†êÏúºÎ°ú ÏÑ§Ï†ï
                                        if (request.scheduledDate) {
                                          setServiceWorkScheduledDate(request.scheduledDate)
                                          setServiceWorkStartDate(request.workStartDate || '')
                                          setServiceWorkContent(request.workContent || '')
                                          setServiceWorkCompleteDate(request.workCompleteDate || '')
                                          setServiceWorkProblemIssue(request.problemIssue || '')
                                          setServiceWorkIsUnresolved(request.isUnresolved || false)
                                          setServiceWorkCurrentStage(request.currentWorkStage || 'ÏòàÏ†ï')
                                        } else {
                                          // ÌòÑÏû¨ ÏãúÏ†êÏúºÎ°ú ÏûêÎèô ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
                                          const now = new Date()
                                          const kstOffset = 9 * 60 // ÌïúÍµ≠ÏùÄ UTC+9
                                          const kstTime = new Date(now.getTime() + (kstOffset * 60 * 1000))
                                          const formattedNow = kstTime.toISOString().slice(0, 16)
                                          setServiceWorkScheduledDate(formattedNow)
                                          setServiceWorkStartDate('')
                                          setServiceWorkContent('')
                                          setServiceWorkCompleteDate('')
                                          setServiceWorkProblemIssue('')
                                          setServiceWorkIsUnresolved(false)
                                          setServiceWorkCurrentStage('ÏòàÏ†ï')
                                        }
                                        
                                        setShowServiceWorkInfoModal(true);
                                      }}
                                      className="px-2 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600 transition-colors"
                                    >
                                      ÏàòÏ†ï
                                    </button>
                                    <button
                                      onClick={() => {
                                        setSelectedWorkRequest(request);
                                        setShowServiceWorkDeleteModal(true);
                                      }}
                                      className="px-2 py-1 bg-red-500 text-white rounded text-xs hover:bg-red-600 transition-colors"
                                    >
                                      ÏÇ≠Ï†ú
                                    </button>
                                  </>
                                )}

                                {/* Ï°∞ÏπòÏÜåÏÜçÏù¥ ITÌåÄÏù¥ ÏïÑÎãå Í≤ΩÏö∞: Î≤ÑÌäº ÏóÜÏùå */}
                                {(request.stage === 'Î∞∞Ï†ï' || request.stage === 'ÌôïÏù∏' || request.stage === 'ÏòàÏ†ï' || 
                                  request.stage === 'ÏûëÏóÖ' || request.stage === 'ÏôÑÎ£å' || request.stage === 'ÎØ∏Í≤∞') && 
                                  request.assigneeDepartment !== 'ITÌåÄ' && (
                                  <span className="text-gray-400 text-xs">Í∂åÌïúÏóÜÏùå</span>
                                )}
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
                {serviceWorkTotalPages > 1 && (
                  <div className="flex justify-center mt-4 pt-4 pb-4 border-t border-gray-200">
                    <div className="flex items-center space-x-2">
                      <button 
                        onClick={() => setServiceWorkCurrentPage(Math.max(1, serviceWorkCurrentPage - 1))}
                        disabled={serviceWorkCurrentPage === 1}
                        className="px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded text-xs disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        Ïù¥Ï†Ñ
                      </button>
                      <span className="px-2 py-1 bg-blue-500 text-white rounded text-xs">
                        {serviceWorkCurrentPage}/{serviceWorkTotalPages}
                      </span>
                      <button 
                        onClick={() => setServiceWorkCurrentPage(Math.min(serviceWorkTotalPages, serviceWorkCurrentPage + 1))}
                        disabled={serviceWorkCurrentPage >= serviceWorkTotalPages}
                        className="px-2 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded text-xs disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        Îã§Ïùå
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          {/* ÌîÑÎ†àÏûÑ 3: ÏùºÎ∞òÎ¨∏Ïùò ÌòÑÌô© */}
          <div className="absolute" style={{left: '1590px', top: '84px'}}>
            <div className="w-80" style={{width: '306px'}}>
              <div className="bg-white rounded-lg shadow-lg p-6 flex flex-col" style={{height: '650px', backgroundColor: 'rgba(255, 255, 255, 0.5)'}}>
                <div className="mb-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <button
                      onClick={() => {
                        fetchManagerInquiryStatistics();
                      }}
                      className="w-6 h-6 text-gray-600 hover:text-gray-800 transition-colors"
                    >
                      <Icon name="refresh" size={16} />
                    </button>
                    <h3 className="text-lg font-bold text-gray-800">ÏùºÎ∞òÎ¨∏Ïùò ÌòÑÌô©</h3>
                  </div>
                  <div className="flex justify-end" style={{marginTop: '30px'}}>
                    <button
                      onClick={() => setShowGeneralInquiryStatus(!showGeneralInquiryStatus)}
                      className={`w-8 h-4 rounded-full transition-colors ${
                        showGeneralInquiryStatus ? 'bg-green-500' : 'bg-gray-400'
                      }`}
                    >
                      <div className={`w-3 h-3 bg-white rounded-full transition-transform ${
                        showGeneralInquiryStatus ? 'translate-x-4' : 'translate-x-0.5'
                      }`} />
                    </button>
                  </div>
                </div>

                {showGeneralInquiryStatus && (
                  <>
                    {/* Î∂ÄÏÑú ÏÑ†ÌÉù */}
                    <div className="mb-4">
                      <select
                        value={inquirySelectedDepartment}
                        onChange={(e) => {
                          setInquirySelectedDepartment(e.target.value)
                          setInquiryCurrentDepartment(e.target.value || 'Ï†ÑÏ≤¥ Î∂ÄÏÑú')
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                        disabled={departmentsLoading}
                      >
                        <option value="">Ï†ÑÏ≤¥ Î∂ÄÏÑú</option>
                        {departments.map((dept) => (
                          <option key={dept.id} value={dept.name}>
                            {dept.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Í≤ÄÏÉâ Í∏∞Í∞Ñ ÏÑ†ÌÉù */}
                    <div className="mb-4">
                      <div className="flex items-center space-x-1">
                        <input
                          type="date"
                          value={inquiryStartDate}
                          max={inquiryEndDate}
                          onChange={(e) => {
                            const startDate = e.target.value;
                            setInquiryStartDate(startDate);
                            // ÏãúÏûëÏùºÏù¥ Ï¢ÖÎ£åÏùºÎ≥¥Îã§ Îä¶ÏúºÎ©¥ Ï¢ÖÎ£åÏùºÏùÑ ÏãúÏûëÏùºÎ°ú ÏÑ§Ï†ï
                            if (startDate && inquiryEndDate && startDate > inquiryEndDate) {
                              setInquiryEndDate(startDate);
                            }
                          }}
                          className="w-full px-2 py-2 border border-gray-300 rounded-lg text-xs"
                        />
                        <span className="text-gray-500 text-sm">~</span>
                        <input
                          type="date"
                          value={inquiryEndDate}
                          min={inquiryStartDate}
                          onChange={(e) => {
                            const endDate = e.target.value;
                            setInquiryEndDate(endDate);
                            // Ï¢ÖÎ£åÏùºÏù¥ ÏãúÏûëÏùºÎ≥¥Îã§ Ïù¥Î•¥Î©¥ ÏãúÏûëÏùºÏùÑ Ï¢ÖÎ£åÏùºÎ°ú ÏÑ§Ï†ï
                            if (endDate && inquiryStartDate && endDate < inquiryStartDate) {
                              setInquiryStartDate(endDate);
                            }
                          }}
                          className="w-full px-2 py-2 border border-gray-300 rounded-lg text-xs"
                        />
                      </div>
                    </div>

                    {/* Ïä§ÌÉù ÎßâÎåÄ Ï∞®Ìä∏ (ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº) */}
                    <div className="flex justify-center items-center h-96">
                      <div className="w-full h-80 relative">
                        <div className="flex justify-center h-full">
                          {/* Ïä§ÌÉù ÎßâÎåÄ */}
                          <div className="flex flex-col items-center">
                            {(() => {
                              // ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº: ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑú ÏßÅÏ†ë Í≥ÑÏÇ∞ (Ïà´ÏûêÌòï Î≥ÄÌôò)
                              const answered = inquiryData.answered || 0;
                              const pending = inquiryData.unanswered || 0;
                              const total = answered + pending;
                              
                              // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ "Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå" ÌëúÏãú
                              if (total === 0) {
                                return (
                                  <div className="w-32 h-32 flex items-center justify-center bg-gray-100 rounded-lg">
                                    <span className="text-gray-500 text-sm">Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</span>
                                  </div>
                                );
                              }
                              
                              // TÍ∞í: Í≥†Ï†ï Î∞ïÏä§ ÌÅ¨Í∏∞ (300px)
                              const T = 300; // Ìï≠ÏÉÅ 300px Í≥†Ï†ï                              
                              // AÍ∞í: ÎãµÎ≥Ä ÎπÑÏú®Ïóê Îî∞Î•∏ ÎÜíÏù¥
                              const A = (answered / total) * T;                              
                              // BÍ∞í: ÎØ∏ÎãµÎ≥Ä ÎπÑÏú®Ïóê Îî∞Î•∏ ÎÜíÏù¥  
                              const B = (pending / total) * T;                              
                              return (
                                <div className="w-32 relative" style={{ height: `${T}px` }}>
                                  {/* ÎØ∏ÎãµÎ≥Ä (Ï£ºÌô©ÏÉâ) - ÏÉÅÎã® */}
                                  <div
                                    className="w-full bg-orange-500 rounded-t absolute top-0 flex items-center justify-center"
                                    style={{ 
                                      height: `${B}px`
                                    }}
                                  >
                                    <span className="text-black text-sm font-bold">
                                      {pending}
                                    </span>
                                  </div>
                                  {/* ÎãµÎ≥Ä (Ï¥àÎ°ùÏÉâ) - ÌïòÎã® */}
                                  <div
                                    className="w-full bg-green-500 rounded-b absolute bottom-0 flex items-center justify-center"
                                    style={{ 
                                      height: `${A}px` 
                                    }}
                                  >
                                    <span className="text-black text-sm font-bold">
                                      {answered}
                                    </span>
                                  </div>
                                </div>
                              );
                            })()}
                            {/* ÎùºÎ≤® */}
                            <div className="mt-3 text-center">
                              <div className="flex items-center space-x-3 text-sm">
                                <div className="flex items-center space-x-1">
                                  <div className="w-4 h-4 bg-orange-500 rounded"></div>
                                  <span>ÎØ∏ÎãµÎ≥Ä</span>
                                </div>
                                <div className="flex items-center space-x-1">
                                  <div className="w-4 h-4 bg-green-500 rounded"></div>
                                  <span>ÎãµÎ≥Ä</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Ìë∏ÌÑ∞ */}
      <footer className="relative z-10 text-white py-4">
        <div className="max-w-7xl mx-auto px-6 text-center">
          <p className="text-sm">‚ìí 2025 IT ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú. Î™®Îì†Í∂åÎ¶¨Îäî Juss Í∞Ä Î≥¥Ïú†</p>
        </div>
      </footer>
      {/* Î∞∞Ï†ïÌôïÏù∏ Î™®Îã¨ */}
      {showAssignmentModal && selectedRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-3xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="assignment-confirm" size={24} className="mr-2" />
                Î∞∞Ï†ï ÌôïÏù∏
              </h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© - 2Ïó¥ Î†àÏù¥ÏïÑÏõÉ */}
            <div className="py-4 px-6">
              <div className="grid grid-cols-2 gap-6">
                {/* ÏôºÏ™Ω: ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§ Ïã†Ï≤≠ Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ Î≤àÌò∏ : </span>
                      <span className="text-sm font-bold text-red-600">{selectedRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ Ï†úÎ™© : </span>
                      <span className="text-sm">{selectedRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ ÎÇ¥Ïö© </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedRequest.content}
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê : <span className="text-sm ml-1 text-black">{selectedRequest.requester} ({selectedRequest.department})</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠ Ïó∞ÎùΩÏ≤ò : <span className="text-sm ml-1 text-black">{selectedRequest.contact}</span>
                      </span>                    
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ ÏúÑÏπò 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ ÏùºÏãú : <span className="text-sm ml-1 text-black">{selectedRequest.requestDate} {selectedRequest.requestTime}</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ ÏÉÅÌÉú : <span className="text-sm ml-1 text-red-600 font-semibold">{selectedRequest.currentStatus}</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†ú Ïã†Ï≤≠Ïûê : </span>
                      <span className="text-sm ml-1">{selectedRequest.actualRequester || selectedRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†ú Ïó∞ÎùΩÏ≤ò : </span>
                      <span className="text-sm ml-1">{selectedRequest.actualContact || selectedRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* Ïò§Î•∏Ï™Ω: Î∞∞Ï†ï Î∞òÎ†§ (Î∞òÎ†§ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÏóêÎßå ÌëúÏãú) */}
                {showRejectionInAssignment && (
                  <div className="space-y-4 animate-in slide-in-from-right-4 duration-300">
                    <div className="flex items-center space-x-2 mb-4">
                      <Icon name="assignment-reject" size={20} className="text-orange-600" />
                      <h3 className="text-lg font-semibold text-gray-800">Î∞∞Ï†ï Î∞òÎ†§</h3>
                    </div>
                    
                    <div className="space-y-0">
                      <div>
                        <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ï ÏùºÏãú : </span>
                        <span className="text-sm">{selectedRequest.assignDate || '2025.08.31 11:10'}</span>
                      </div>
                      
                      <div>
                        <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ï Îã¥ÎãπÏûê : </span>
                        <span className="text-sm">{selectedRequest.assignee || 'Ïù¥Î∞∞Ï†ï'}</span>
                      </div>
                      
                      <div>
                        <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ï ÏùòÍ≤¨ : </span>
                        <span className="text-sm">{selectedRequest.assignmentOpinion || 'ÏóÖÎ¨¥Ïóê Ï†ÅÌï©ÌïòÏó¨ Î∞∞Ï†ï'}</span>
                      </div>
                      
                      <div>
                        <span className="text-sm font-medium text-gray-600">ÏÑúÎπÑÏä§ Ï°∞ÏπòÏú†Ìòï ‚Üí </span>
                        <span className="text-sm">{selectedRequest.serviceType}</span>
                      </div>
                      
                      <div>
                        <span className="text-sm font-medium text-gray-600">Ï°∞Ïπò Îã¥ÎãπÏûê : </span>
                        <span className="text-sm">ÍπÄÍ∏∞Ïà†</span>
                      </div>
                      
                      <div>
                        <span className="text-sm font-medium text-gray-600">Î∞òÎ†§ ÏùòÍ≤¨ : </span>
                        <textarea
                          value={rejectionOpinion}
                          onChange={(e) => setRejectionOpinion(e.target.value)}
                          placeholder="Î∞∞Ï†ï Îã¥ÎãπÏûê ÏùòÍ≤¨"
                          className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                          rows={3}
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              {!showRejectionInAssignment ? (
                <>
                  <button
                    onClick={handleAssignmentApprove}
                    className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
                  >
                    ÏäπÏù∏
                  </button>
                  <button
                    onClick={handleAssignmentReject}
                    className="flex-1 bg-orange-500 hover:bg-orange-600 text-white py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
                  >
                    Î∞òÎ†§
                  </button>
                </>
              ) : (
                <>
                  <button
                    onClick={() => setShowRejectionInAssignment(false)}
                    className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                  >
                    Ï∑®ÏÜå
                  </button>
                  <button
                    onClick={handleFinalReject}
                    className="px-6 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                  >
                    ÏµúÏ¢Ö Î∞òÎ†§
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      )}
      {/* Ï†ïÎ≥¥ÌôïÏù∏ Î™®Îã¨ */}
      {showInfoViewModal && selectedRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="assignment-confirm" size={24} className="mr-2" />
                Ï†ïÎ≥¥ ÌôïÏù∏
              </h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© - 2Ïó¥ Î†àÏù¥ÏïÑÏõÉ */}
            <div className="py-4 px-6">
              <div className="grid grid-cols-2 gap-6">
                {/* ÏôºÏ™Ω: ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Î≤àÌò∏: </span>
                      <span className="text-sm font-bold text-red-600">{selectedRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Ï†úÎ™©: </span>
                      <span className="text-sm">{selectedRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedRequest.content}
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê: 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.requester} ({selectedRequest.department})</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïó∞ÎùΩÏ≤ò: 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.contact}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏúÑÏπò: 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏùºÏãú: <span className="text-sm ml-1 text-black">{selectedRequest.requestDate} {selectedRequest.requestTime}</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ÏÉÅÌÉú: 
                      </span>
                      <span className="text-sm ml-5 text-red-600 font-semibold">{selectedRequest.currentStatus}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏã†Ï≤≠Ïûê: </span>
                      <span className="text-sm ml-5">{selectedRequest.actualRequester || selectedRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏó∞ÎùΩÏ≤ò: </span>
                      <span className="text-sm ml-5">{selectedRequest.actualContact || selectedRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* Ïò§Î•∏Ï™Ω: ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù (ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÏóêÎßå ÌëúÏãú) */}
                {showWorkRegistrationInInfo && (
                  <div className="space-y-4 animate-in slide-in-from-right-4 duration-300">
                    <div className="flex items-center space-x-2 mb-4">
                      <Icon name="settings" size={20} className="text-gray-600" />
                      <h3 className="text-lg font-semibold text-gray-800">ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù</h3>
                    </div>
                    
                    <div className="space-y-0 py-0">
                      {/* Î∞∞Ï†ï Ï†ïÎ≥¥ */}
                      <div className="bg-gray-50 px-4 py-0 rounded-lg">
              <div className="space-y-2">
                          <div>
                            <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ïÏùºÏãú :</span>
                            <span className="text-sm text-gray-800 ml-2">{selectedRequest.assignDate || '2025.08.31 10:40'}</span>
                </div>
                          <div>
                            <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ï Îã¥ÎãπÏûê :</span>
                            <span className="text-sm text-gray-800 ml-2">{selectedRequest.assignee || 'Ïù¥Î∞∞Ï†ï'}</span>
                </div>
                          <div>
                            <span className="text-sm font-medium text-gray-600">ÏÑúÎπÑÏä§ Ï°∞Ïπò Ï†ïÎ≥¥ :</span>
                            <span className="text-sm text-gray-800 ml-2">{selectedRequest.serviceType || 'Î¨∏Ï†ú'}</span>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-600">Ï°∞ÏπòÎã¥ÎãπÏûê :</span>
                            <span className="text-sm text-gray-800 ml-2">ÍπÄÍ∏∞Ïà†</span>
              </div>
            </div>
          </div>


                      {/* ÏòàÏ†ï Ï°∞Ïú® ÏùºÏãú */}
                      <div className={`px-4 py-0 rounded-lg border-2 ${currentStage === 'ÏòàÏ†ï' ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                        <div className="flex items-center gap-4">
                          <div className="flex-1">
                            <label className="block text-sm font-medium text-gray-600 mb-2">ÏòàÏ†ï Ï°∞Ïú® ÏùºÏãú</label>
                            <input
                              type="datetime-local"
                              value={scheduledDate}
                              onChange={(e) => setScheduledDate(e.target.value)}
                              disabled={currentStage !== 'ÏòàÏ†ï'}
                              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                currentStage !== 'ÏòàÏ†ï' ? 'bg-gray-100 cursor-not-allowed' : ''
                              }`}
                            />
                          </div>
                          {currentStage === 'ÏòàÏ†ï' && (
                            <div className="flex items-center gap-2">
                              <Icon name="calendar" className="w-5 h-5 text-gray-400" />
            <button
                                onClick={handleScheduledProcess}
                                disabled={!scheduledDate}
                                className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                                  scheduledDate
                                    ? 'bg-blue-500 hover:bg-blue-600 text-white'
                                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                }`}
                              >
                                Ï≤òÎ¶¨
                              </button>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* ÏûëÏóÖ ÏãúÏûë ÏùºÏãú */}
                      <div className={`px-4 py-0 rounded-lg border-2 ${currentStage === 'ÏûëÏóÖ' ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                        <div className="flex items-center gap-4">
                          <div className="flex-1">
                            <label className="block text-sm font-medium text-gray-600 mb-2">ÏûëÏóÖ ÏãúÏûë ÏùºÏãú</label>
                            <input
                              type="datetime-local"
                              value={workStartDate}
                              onChange={(e) => setWorkStartDate(e.target.value)}
                              disabled={currentStage !== 'ÏûëÏóÖ'}
                              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                currentStage !== 'ÏûëÏóÖ' ? 'bg-gray-100 cursor-not-allowed' : ''
                              }`}
                            />
                          </div>
                          {currentStage === 'ÏûëÏóÖ' && (
                            <div className="flex items-center gap-2">
                              <Icon name="calendar" className="w-5 h-5 text-gray-400" />
                              <button
                                onClick={handleWorkStartProcess}
                                disabled={!workStartDate}
                                className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                                  workStartDate
                                    ? 'bg-blue-500 hover:bg-blue-600 text-white'
                                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                }`}
                              >
                                Ï≤òÎ¶¨
                              </button>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* ÏûëÏóÖ ÎÇ¥Ïó≠ Î∞è ÏôÑÎ£å ÏùºÏãú */}
                      <div className={`px-4 py-0 rounded-lg border-2 ${currentStage === 'ÏôÑÎ£å' ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                        <div className="space-y-0">
                          <div>
                            <label className="block text-sm font-medium text-gray-600 mb-2">ÏûëÏóÖ ÎÇ¥Ïó≠</label>
                            <textarea
                              value={workContent}
                              onChange={(e) => setWorkContent(e.target.value)}
                              disabled={currentStage !== 'ÏôÑÎ£å'}
                              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                currentStage !== 'ÏôÑÎ£å' ? 'bg-gray-100 cursor-not-allowed' : ''
                              }`}
                              rows={3}
                              placeholder="ÏûëÏóÖ ÎÇ¥Ïö© ÏûÖÎ†•"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-600 mb-2">ÏûëÏóÖ ÏôÑÎ£å ÏùºÏãú</label>
                            <input
                              type="datetime-local"
                              value={workCompleteDate}
                              onChange={(e) => setWorkCompleteDate(e.target.value)}
                              disabled={currentStage !== 'ÏôÑÎ£å'}
                              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                currentStage !== 'ÏôÑÎ£å' ? 'bg-gray-100 cursor-not-allowed' : ''
                              }`}
                            />
                          </div>
                          {currentStage === 'ÏôÑÎ£å' && (
                            <div className="flex justify-end">
                              <button
                                onClick={handleWorkCompleteProcess}
                                disabled={!workContent || !workCompleteDate}
                                className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${
                                  workContent && workCompleteDate
                                    ? 'bg-blue-500 hover:bg-blue-600 text-white'
                                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                }`}
                              >
                                Ï≤òÎ¶¨
                              </button>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Î¨∏Ï†ú ÏÇ¨Ìï≠ */}
                      <div className={`px-4 py-0 rounded-lg border-2 ${currentStage === 'ÎØ∏Í≤∞' ? 'border-orange-300 bg-orange-50' : 'border-gray-200 bg-gray-50'}`}>
                        <div className="flex items-start gap-4">
                          <div className="flex-1">
                            <label className="block text-sm font-medium text-gray-600 mb-2">Î¨∏Ï†ú ÏÇ¨Ìï≠</label>
                            <textarea
                              value={problemIssue}
                              onChange={(e) => setProblemIssue(e.target.value)}
                              disabled={currentStage !== 'ÎØ∏Í≤∞'}
                              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 ${
                                currentStage !== 'ÎØ∏Í≤∞' ? 'bg-gray-100 cursor-not-allowed' : ''
                              }`}
                              rows={3}
                              placeholder="ÏûëÏóÖ Ï§ë Î∞úÍ≤¨ Îêú Î¨∏Ï†úÏ†ê ÏûÖÎ†•"
                            />
                          </div>
                          {currentStage === 'ÎØ∏Í≤∞' && (
                            <div className="flex items-start gap-2">
                              <button
                                onClick={handleUnresolvedProcess}
                                className="px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-pink-500 hover:bg-pink-600 text-white"
                              >
                                Îì±Ïû¨
                              </button>
                            </div>
                          )}
                        </div>
                        <div className="mt-3 flex items-center">
                          <input
                            type="checkbox"
                            id="unresolved"
                            checked={isUnresolved}
                            onChange={(e) => setIsUnresolved(e.target.checked)}
                            disabled={currentStage !== 'ÎØ∏Í≤∞'}
                            className={`mr-2 ${currentStage !== 'ÎØ∏Í≤∞' ? 'cursor-not-allowed' : ''}`}
                          />
                          <label htmlFor="unresolved" className={`text-sm font-medium ${
                            currentStage !== 'ÎØ∏Í≤∞' ? 'text-gray-400' : 'text-gray-700'
                          }`}>
                            ÎØ∏Í≤∞ ÏôÑÎ£å
                          </label>
                        </div>
                      </div>

                    </div>
                  </div>
                )}

                {/* Ïò§Î•∏Ï™Ω: Îπà Í≥µÍ∞Ñ (ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù Î≤ÑÌäº ÌÅ¥Î¶≠ Ï†Ñ) */}
                {!showWorkRegistrationInInfo && (
                <div className="space-y-4 animate-in fade-in duration-300">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="settings" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù</h3>
                  </div>
                  
                  <div className="text-center py-8">
                    <p className="text-gray-500 mb-4">ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ùÏùÑ ÏãúÏûëÌïòÎ†§Î©¥</p>
                    <p className="text-gray-500 mb-6">ÌïòÎã® Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî</p>
                  </div>
                </div>
                )}
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              {!showWorkRegistrationInInfo ? (
                <>
              <button
                onClick={closeModal}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Ï∑®ÏÜå
              </button>
              <button
                    onClick={handleWorkRegistrationInInfo}
                className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÏûëÏóÖ Ï†ïÎ≥¥ Îì±Î°ù
              </button>
                </>
              ) : (
                <>
                  <button
                    onClick={() => setShowWorkRegistrationInInfo(false)}
                    className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                  >
                    Îí§Î°úÍ∞ÄÍ∏∞
            </button>
            <button
              onClick={() => {
                      closeModal()
                      setShowWorkCompleteModal(true)
              }}
                    className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
            >
                    ÏûëÏóÖ ÌôïÏù∏ ÏôÑÎ£å
            </button>
                </>
              )}
          </div>
        </div>
      </div>
      )}

      {/* ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Î™®Îã¨ */}
      {showPasswordModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="lock" size={24} className="mr-2" />
                ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
              </h2>
              <button
                onClick={() => {
                  setShowPasswordModal(false)
                  setCurrentPassword('')
                  setNewPassword('')
                  setConfirmPassword('')
                }}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
    </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-4 px-6 space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="lock" size={16} className="mr-2" />
                  ÌòÑÏû¨ ÎπÑÎ∞ÄÎ≤àÌò∏
                </label>
                <input
                  type="password"
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ÌòÑÏû¨ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="lock" size={16} className="mr-2" />
                  ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏
                </label>
                <input
                  type="password"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="lock" size={16} className="mr-2" />
                  ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
                </label>
                <input
                  type="password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowPasswordModal(false)
                  setCurrentPassword('')
                  setNewPassword('')
                  setConfirmPassword('')
                }}
                className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={async () => {
                  // ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Î°úÏßÅ
                  if (!currentPassword || !newPassword || !confirmPassword) {
                    alert('Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                    return
                  }
                  if (newPassword !== confirmPassword) {
                    alert('ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.')
                    return
                  }
                  if (newPassword.length < 8) {
                    alert('ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 8Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.')
                    return
                  }

                  try {
                    if (!currentUserId) {
                      alert('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
                      return
                    }

                    // APIÎ•º ÌÜµÌï¥ ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
                    const response = await apiClient.changeUserPassword(
                      currentUserId,
                      currentPassword,
                      newPassword
                    )

                    if (response.success) {
                      alert('ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.')
                      setShowPasswordModal(false)
                      setCurrentPassword('')
                      setNewPassword('')
                      setConfirmPassword('')
                    } else {
                      alert(response.message || 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
                    }
                  } catch (error) {
                    console.error('Password change error:', error)
                    alert('ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
                  }
                }}
                className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Î≥ÄÍ≤Ω
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Ï†ïÎ≥¥Î≥ÄÍ≤Ω Î™®Îã¨ */}
      {showInfoModal && !showPasswordModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="user" size={24} className="mr-2" />
                ÌöåÏõê Ï†ïÎ≥¥ ÏàòÏ†ï
              </h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-4 px-6 space-y-4">
              {/* Ïù¥Î©îÏùº */}
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="mail" size={16} className="mr-2" />
                  Ïù¥Î©îÏùº
                </label>
                <input
                  type="email"
                  value={managerInfo.email}
                  readOnly
                  className="w-full px-3 py-1 border-0 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed focus:outline-none"
                />
              </div>

              {/* ÏÑ±Î™Ö */}
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="user" size={16} className="mr-2" />
                  ÏÑ±Î™Ö
                </label>
                <input
                  type="text"
                  value={managerInfo.fullName}
                  onChange={(e) => setManagerInfo({...managerInfo, fullName: e.target.value})}
                  className="w-full px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* ÏßÅÍ∏â */}
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="briefcase" size={16} className="mr-2" />
                  ÏßÅÍ∏â
                </label>
                <input
                  type="text"
                  value={managerInfo.position}
                  onChange={(e) => setManagerInfo({...managerInfo, position: e.target.value})}
                  className="w-full px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* ÏÜåÏÜç */}
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="briefcase" size={16} className="mr-2" />
                  ÏÜåÏÜç
                </label>
                <select
                  value={managerInfo.department}
                  onChange={(e) => setManagerInfo({...managerInfo, department: e.target.value})}
                  className="w-full px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  disabled={departmentsLoading}
                >
                  <option value="">
                    {departmentsLoading ? 'Î°úÎî© Ï§ë...' : 'ÏÜåÏÜçÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'}
                  </option>
                  {departments.map((dept) => (
                    <option key={dept.id} value={dept.name}>
                      {dept.name}
                    </option>
                  ))}
                </select>
              </div>

              {/* Ïó∞ÎùΩÏ≤ò */}
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="mail" size={16} className="mr-2" />
                  Ïó∞ÎùΩÏ≤ò
                </label>
                <input
                  type="tel"
                  value={managerInfo.phone}
                  onChange={(e) => setManagerInfo({...managerInfo, phone: e.target.value})}
                  className="w-full px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Î≤ÑÌäº */}
              <div className="pt-4">
                <button 
                  onClick={() => setShowPasswordModal(true)}
                  className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
                >
                  ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
                </button>
              </div>

              {/* ÏÉùÏÑ±ÏùºÏãú (ÏùΩÍ∏∞ Ï†ÑÏö©) */}
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                  <Icon name="calendar" size={16} className="mr-2" />
                  ÏÉùÏÑ±ÏùºÏãú
                </label>
                <input
                  type="text"
                  value={(() => {
                    // YYYY-MM-DD hh:mm ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                    if (managerInfo.createDate) {
                      try {
                        const date = new Date(managerInfo.createDate);
                        if (!isNaN(date.getTime())) {
                          const year = date.getFullYear();
                          const month = String(date.getMonth() + 1).padStart(2, '0');
                          const day = String(date.getDate()).padStart(2, '0');
                          const hours = String(date.getHours()).padStart(2, '0');
                          const minutes = String(date.getMinutes()).padStart(2, '0');
                          return `${year}-${month}-${day} ${hours}:${minutes}`;
                        }
                      } catch (e) {
                        console.error('Date parsing error:', e);
                      }
                    }
                    return managerInfo.createDate || '-';
                  })()}
                  readOnly
                  className="w-full px-3 py-1 border-0 rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed focus:outline-none"
                />
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={async () => {
                  if (!currentUserId) {
                    alert('ÏÇ¨Ïö©Ïûê IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                    return;
                  }

                  try {
                    // APIÎ•º ÌÜµÌï¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
                    const updateData = {
                      name: managerInfo.fullName,
                      department: managerInfo.department,
                      position: managerInfo.position,
                      phone: managerInfo.phone
                    };

                    const response = await apiClient.updateUser(currentUserId, updateData);

                    if (response.success) {
                      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
                      const userStr = localStorage.getItem('user');
                      if (userStr) {
                        const currentUser = JSON.parse(userStr);
                        const updatedUser = {
                          ...currentUser,
                          name: managerInfo.fullName,
                          department: managerInfo.department,
                          position: managerInfo.position,
                          phone: managerInfo.phone,
                          status: currentUser.status // status Î™ÖÏãúÏ†ÅÏúºÎ°ú Ïú†ÏßÄ
                        };
                        localStorage.setItem('user', JSON.stringify(updatedUser));
                      }

                      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                      setManagerInfo({ ...managerInfo, name: managerInfo.fullName });

                      // Î™®Îã¨ Îã´Í∏∞ Î∞è ÏÑ±Í≥µ Î™®Îã¨ ÌëúÏãú
                      setShowInfoModal(false);
                      setShowInfoSuccessModal(true);
                    } else {
                      alert(response.error || 'ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                    }
                  } catch (error) {
                    console.error('ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï Ïò§Î•ò:', error);
                    alert('ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                  }
                }}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Ï†ïÎ≥¥ÏàòÏ†ï ÏÑ±Í≥µ Î™®Îã¨ */}
      {showInfoSuccessModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="check-circle" size={24} className="mr-2 text-green-600" />
                ÏàòÏ†ï ÏôÑÎ£å
              </h2>
              <button
                onClick={() => setShowInfoSuccessModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="check-circle" size={32} className="text-green-600" />
              </div>
              <p className="text-gray-600 mb-6">ÌöåÏõêÏ†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowInfoSuccessModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
      {/* Î∞∞Ï†ïÏäπÏù∏ ÏÑ±Í≥µ Î™®Îã¨ */}
      {showApprovalSuccessModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="check-circle" size={24} className="mr-2 text-green-600" />
                ÏäπÏù∏ ÏôÑÎ£å
              </h2>
              <button
                onClick={() => setShowApprovalSuccessModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="check-circle" size={32} className="text-green-600" />
              </div>
              <p className="text-gray-600 mb-6">Î∞∞Ï†ï ÏäπÏù∏ ÎêòÏóàÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowApprovalSuccessModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÏµúÏ¢ÖÎ∞òÎ†§ ÏÑ±Í≥µ Î™®Îã¨ */}
      {showRejectionSuccessModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="assignment-reject" size={24} className="mr-2 text-orange-600" />
                Î∞òÎ†§ ÏôÑÎ£å
              </h2>
              <button
                onClick={() => setShowRejectionSuccessModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="assignment-reject" size={32} className="text-orange-600" />
              </div>
              <p className="text-gray-600 mb-6">Î∞∞Ï†ï Î∞òÎ†§Í∞Ä ÎêòÏóàÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowRejectionSuccessModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù Î™®Îã¨ */}
      {showWorkRegistrationModal && selectedRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="settings" size={24} className="mr-2" />
                ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù
              </h2>
              <button
                onClick={() => setShowWorkRegistrationModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© - 2Ïó¥ Î†àÏù¥ÏïÑÏõÉ */}
            <div className="py-4 px-6">
              <div className="grid grid-cols-2 gap-6">
                {/* ÏôºÏ™Ω: ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥ (ÏùΩÍ∏∞Ï†ÑÏö©) */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Î≤àÌò∏: </span>
                      <span className="text-sm font-bold text-red-600">{selectedRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Ï†úÎ™©: </span>
                      <span className="text-sm">{selectedRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedRequest.content}
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê: 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.requester} ({selectedRequest.department})</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïó∞ÎùΩÏ≤ò: 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.contact}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏúÑÏπò: 
                      </span>
                      <span className="text-sm ml-5">{selectedRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏùºÏãú: <span className="text-sm ml-1 text-black">{selectedRequest.requestDate} {selectedRequest.requestTime}</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ÏÉÅÌÉú: 
                      </span>
                      <span className="text-sm ml-5 text-red-600 font-semibold">{selectedRequest.currentStatus}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏã†Ï≤≠Ïûê: </span>
                      <span className="text-sm ml-5">{selectedRequest.actualRequester || selectedRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏó∞ÎùΩÏ≤ò: </span>
                      <span className="text-sm ml-5">{selectedRequest.actualContact || selectedRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* Ïò§Î•∏Ï™Ω: ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="settings" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù</h3>
                  </div>
                  
                  <div className="space-y-0">
                    {/* Î∞∞Ï†ïÏ†ïÎ≥¥ (ÏùΩÍ∏∞Ï†ÑÏö©) */}
                    <div className="mb-4 p-3 bg-gray-50 rounded">
                      <h4 className="text-sm font-medium text-gray-700 mb-2">Î∞∞Ï†ïÏ†ïÎ≥¥</h4>
                      <div className="space-y-1 text-xs">
                        <div><span className="font-medium">Î∞∞Ï†ïÏùºÏãú:</span> {selectedRequest.assignDate || '2025.08.31 11:10'}</div>
                        <div><span className="font-medium">Î∞∞Ï†ïÎã¥ÎãπÏûê:</span> {selectedRequest.assignee || 'Ïù¥Î∞∞Ï†ï'}</div>
                        <div><span className="font-medium">Î∞∞Ï†ïÏùòÍ≤¨:</span> {selectedRequest.assignmentOpinion || 'ÏóÖÎ¨¥Ïóê Ï†ÅÌï©ÌïòÏó¨ Î∞∞Ï†ï'}</div>
                        <div><span className="font-medium">ÏÑúÎπÑÏä§Ïú†Ìòï:</span> {selectedRequest.serviceType}</div>
                        <div><span className="font-medium">Ï°∞ÏπòÎã¥ÎãπÏûê:</span> ÍπÄÍ∏∞Ïà†</div>
                      </div>
                    </div>

                    {/* ÌòÑÏû¨ Îã®Í≥Ñ ÌëúÏãú */}
                    <div className="mb-4 p-2 bg-blue-50 rounded text-center">
                      <span className="text-sm font-medium text-blue-600">ÌòÑÏû¨ Îã®Í≥Ñ: {currentStage}</span>
                    </div>

                    {/* ÏòàÏ†ï Îã®Í≥Ñ */}
                    {currentStage === 'ÏòàÏ†ï' && (
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-600 mb-1">ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãú</label>
                          <input
                            type="datetime-local"
                            value={scheduledDate}
                            onChange={(e) => setScheduledDate(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                          />
                        </div>
                        <button
                          onClick={handleScheduledProcess}
                          className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-all duration-200"
                        >
                          Ï≤òÎ¶¨
                        </button>
                      </div>
                    )}

                    {/* ÏûëÏóÖ Îã®Í≥Ñ */}
                    {currentStage === 'ÏûëÏóÖ' && (
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-600 mb-1">ÏûëÏóÖÏãúÏûëÏùºÏãú</label>
                          <input
                            type="datetime-local"
                            value={workStartDate}
                            onChange={(e) => setWorkStartDate(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                          />
                        </div>
                        <button
                          onClick={handleWorkStartProcess}
                          className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-all duration-200"
                        >
                          Ï≤òÎ¶¨
                        </button>
                      </div>
                    )}

                    {/* ÏôÑÎ£å Îã®Í≥Ñ */}
                    {currentStage === 'ÏôÑÎ£å' && (
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-600 mb-1">ÏûëÏóÖÎÇ¥Ïó≠</label>
                          <textarea
                            value={workContent}
                            onChange={(e) => setWorkContent(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            rows={3}
                            placeholder="ÏûëÏóÖ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-600 mb-1">ÏûëÏóÖÏôÑÎ£åÏùºÏãú</label>
                          <input
                            type="datetime-local"
                            value={workCompleteDate}
                            onChange={(e) => setWorkCompleteDate(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                          />
                        </div>
                        <button
                          onClick={handleWorkCompleteProcess}
                          className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-all duration-200"
                        >
                          Ï≤òÎ¶¨
                        </button>
                      </div>
                    )}

                    {/* ÎØ∏Í≤∞ Îã®Í≥Ñ */}
                    {currentStage === 'ÎØ∏Í≤∞' && (
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-600 mb-1">Î¨∏Ï†úÏÇ¨Ìï≠</label>
                          <textarea
                            value={problemIssue}
                            onChange={(e) => setProblemIssue(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            rows={3}
                            placeholder="Î¨∏Ï†úÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                          />
                        </div>
                        <div className="flex items-center">
                          <input
                            type="checkbox"
                            id="unresolved"
                            checked={isUnresolved}
                            onChange={(e) => setIsUnresolved(e.target.checked)}
                            className="mr-2"
                          />
                          <label htmlFor="unresolved" className="text-sm font-medium text-gray-700">
                            ÎØ∏Ìï¥Í≤∞ÏôÑÎ£å
                          </label>
                        </div>
                        <button
                          onClick={handleUnresolvedProcess}
                          className="w-full bg-orange-500 hover:bg-orange-600 text-white py-2 rounded-lg font-medium transition-all duration-200"
                        >
                          Îì±Ïû¨
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowWorkRegistrationModal(false)}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Ï∑®ÏÜå
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÏûëÏóÖÏôÑÎ£å Î™®Îã¨ */}
      {showWorkCompleteModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="check-circle" size={24} className="mr-2 text-green-600" />
                ÏûëÏóÖ ÌôïÏù∏
              </h2>
              <button
                onClick={() => setShowWorkCompleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="check-circle" size={32} className="text-green-600" />
              </div>
              <p className="text-gray-600 mb-6">ÏûëÏóÖÏùÑ ÌôïÏù∏ ÌïòÏÖ®ÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowWorkCompleteModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
      {/* Î∞∞Ï†ïÏûëÏóÖ Î™®Îã¨ */}
      {showServiceAssignmentModal && selectedWorkRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="user" size={24} className="mr-2" />
                Î∞∞Ï†ïÏûëÏóÖ
              </h2>
              <button
                onClick={() => setShowServiceAssignmentModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-4 px-6">
              <div className="grid grid-cols-2 gap-6">
                {/* ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Î≤àÌò∏: </span>
                      <span className="text-sm font-bold text-red-600">{selectedWorkRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Ï†úÎ™©: </span>
                      <span className="text-sm">{selectedWorkRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-2 bg-gray-50 rounded text-gray-700">
                        {selectedWorkRequest.content}
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requester} ({selectedWorkRequest.department})</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïó∞ÎùΩÏ≤ò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.contact}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏúÑÏπò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏùºÏãú: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requestDate}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ÏÉÅÌÉú: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.currentStatus}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏã†Ï≤≠Ïûê: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏó∞ÎùΩÏ≤ò: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* Î∞∞Ï†ïÏ†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="settings" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">Î∞∞Ï†ïÏ†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Ï°∞ÏπòÎã¥Îãπ ÏÜåÏÜç</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Î∂ÄÏÑúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                        <option value="ITÌåÄ">ITÌåÄ</option>
                        <option value="Ïö¥ÏòÅÌåÄ">Ïö¥ÏòÅÌåÄ</option>
                        <option value="Í∞úÎ∞úÌåÄ">Í∞úÎ∞úÌåÄ</option>
                        <option value="Î≥¥ÏïàÌåÄ">Î≥¥ÏïàÌåÄ</option>
                        <option value="Ïù∏ÏÇ¨ÌåÄ">Ïù∏ÏÇ¨ÌåÄ</option>
                        <option value="Ïû¨Î¨¥ÌåÄ">Ïû¨Î¨¥ÌåÄ</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Ï°∞ÏπòÎã¥ÎãπÏûê</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Îã¥ÎãπÏûêÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                        <option value="ÍπÄÍ∏∞Ïà†">ÍπÄÍ∏∞Ïà†</option>
                        <option value="Î∞ïÍ∏∞Ïà†">Î∞ïÍ∏∞Ïà†</option>
                        <option value="ÌôçÍ∏∞Ïà†">ÌôçÍ∏∞Ïà†</option>
                        <option value="ÏµúÍ∏∞Ïà†">ÏµúÍ∏∞Ïà†</option>
                        <option value="Ï†ïÍ∏∞Ïà†">Ï†ïÍ∏∞Ïà†</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Î∞∞Ï†ïÏùòÍ≤¨</label>
                      <textarea 
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 h-20"
                        placeholder="Î∞∞Ï†ï Îã¥ÎãπÏûê ÏùòÍ≤¨"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1 flex items-center">
                        <Icon name="calendar" size={16} className="mr-1" />
                        Î∞∞Ï†ïÏùºÏãú(ÌòÑÏû¨)
                      </label>
                      <div className="px-3 py-2 bg-gray-50 border border-gray-300 rounded-lg text-sm">
                        {new Date().toLocaleString('ko-KR', { 
                          year: 'numeric', 
                          month: '2-digit', 
                          day: '2-digit', 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">ÏÑúÎπÑÏä§ Ï°∞Ïπò Ïú†Ìòï</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="ÏöîÏ≤≠">ÏöîÏ≤≠</option>
                        <option value="Ïû•Ïï†">Ïû•Ïï†</option>
                        <option value="Î≥ÄÍ≤Ω">Î≥ÄÍ≤Ω</option>
                        <option value="Î¨∏Ï†ú">Î¨∏Ï†ú</option>
                        <option value="Ï†ÅÏö©">Ï†ÅÏö©</option>
                        <option value="Íµ¨ÏÑ±">Íµ¨ÏÑ±</option>
                        <option value="ÏûêÏÇ∞">ÏûêÏÇ∞</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200 space-x-3">
              <button
                onClick={() => setShowServiceAssignmentModal(false)}
                className="px-6 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-lg font-medium transition-all duration-200"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={() => {
                  alert('Î∞∞Ï†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
                  setShowServiceAssignmentModal(false)
                }}
                className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-all duration-200"
              >
                Î∞∞Ï†ïÌïòÍ∏∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Ïû¨Î∞∞Ï†ïÏûëÏóÖ Î™®Îã¨ */}
      {showServiceReassignmentModal && selectedWorkRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="refresh" size={24} className="mr-2" />
                Ïû¨Î∞∞Ï†ïÏûëÏóÖ
              </h2>
              <button
                onClick={() => setShowServiceReassignmentModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-4 px-6">
              <div className="grid grid-cols-2 gap-6">
                {/* ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Î≤àÌò∏: </span>
                      <span className="text-sm font-bold text-blue-600">{selectedWorkRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Ï†úÎ™©: </span>
                      <span className="text-sm">{selectedWorkRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-2 bg-gray-50 rounded text-gray-700">
                        {selectedWorkRequest.content}
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requester} ({selectedWorkRequest.department})</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïó∞ÎùΩÏ≤ò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.contact}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏúÑÏπò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏùºÏãú: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requestDate}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ÏÉÅÌÉú: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.currentStatus}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏã†Ï≤≠Ïûê: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏó∞ÎùΩÏ≤ò: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* Ïû¨Î∞∞Ï†ïÏ†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="settings" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">Ïû¨Î∞∞Ï†ïÏ†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Ï°∞ÏπòÎã¥Îãπ ÏÜåÏÜç</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Î∂ÄÏÑúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                        <option value="ITÌåÄ">ITÌåÄ</option>
                        <option value="Ïö¥ÏòÅÌåÄ">Ïö¥ÏòÅÌåÄ</option>
                        <option value="Í∞úÎ∞úÌåÄ">Í∞úÎ∞úÌåÄ</option>
                        <option value="Î≥¥ÏïàÌåÄ">Î≥¥ÏïàÌåÄ</option>
                        <option value="Ïù∏ÏÇ¨ÌåÄ">Ïù∏ÏÇ¨ÌåÄ</option>
                        <option value="Ïû¨Î¨¥ÌåÄ">Ïû¨Î¨¥ÌåÄ</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Ï°∞ÏπòÎã¥ÎãπÏûê</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Îã¥ÎãπÏûêÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                        <option value="ÍπÄÍ∏∞Ïà†">ÍπÄÍ∏∞Ïà†</option>
                        <option value="Î∞ïÍ∏∞Ïà†">Î∞ïÍ∏∞Ïà†</option>
                        <option value="ÌôçÍ∏∞Ïà†">ÌôçÍ∏∞Ïà†</option>
                        <option value="ÏµúÍ∏∞Ïà†">ÏµúÍ∏∞Ïà†</option>
                        <option value="Ï†ïÍ∏∞Ïà†">Ï†ïÍ∏∞Ïà†</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">Ïû¨Î∞∞Ï†ïÏùòÍ≤¨</label>
                      <textarea 
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 h-20"
                        placeholder="Î∞∞Ï†ï Îã¥ÎãπÏûê ÏùòÍ≤¨"
                      />
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïû¨Î∞∞Ï†ïÏùºÏãú(ÌòÑÏû¨): 
                      </span>
                      <span className="text-sm ml-5">
                        {new Date().toLocaleString('ko-KR', { 
                          year: 'numeric', 
                          month: '2-digit', 
                          day: '2-digit', 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </span>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-600 mb-1">ÏÑúÎπÑÏä§ Ï°∞Ïπò Ïú†Ìòï</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="Íµ¨ÏÑ±">Íµ¨ÏÑ±</option>
                        <option value="ÏöîÏ≤≠">ÏöîÏ≤≠</option>
                        <option value="Ïû•Ïï†">Ïû•Ïï†</option>
                        <option value="Î≥ÄÍ≤Ω">Î≥ÄÍ≤Ω</option>
                        <option value="Î¨∏Ï†ú">Î¨∏Ï†ú</option>
                        <option value="Ï†ÅÏö©">Ï†ÅÏö©</option>
                        <option value="ÏûêÏÇ∞">ÏûêÏÇ∞</option>
                      </select>
                    </div>
                    
                    {/* Ïù¥Ï†Ñ Î∞∞Ï†ï Ï†ïÎ≥¥ */}
                    <div className="border-t pt-3 mt-4">
                      <h4 className="text-sm font-semibold text-gray-700 mb-3">Ïù¥Ï†Ñ Î∞∞Ï†ï Ï†ïÎ≥¥</h4>
                      
                      <div className="space-y-0">
                        <div>
                          <span className="text-xs font-medium text-gray-500">Ï†Ñ) Î∞∞Ï†ïÏùºÏãú: </span>
                          <span className="text-xs ml-2">{selectedWorkRequest.assignTime || '2025.08.31 11:40'}</span>
                        </div>
                        
                        <div>
                          <span className="text-xs font-medium text-gray-500">Ï†Ñ) Î∞∞Ï†ïÎã¥ÎãπÏûê: </span>
                          <span className="text-xs ml-2">Ïù¥Î∞∞Ï†ï (Í¥ÄÎ¶¨ÌåÄ)</span>
                        </div>
                        
                        <div>
                          <span className="text-xs font-medium text-gray-500">Ï†Ñ) Î∞∞Ï†ïÏùòÍ≤¨: </span>
                          <span className="text-xs ml-2">ÏóÖÎ¨¥Ïóê Ï†ÅÌï©ÌïòÏó¨ Î∞∞Ï†ï</span>
                        </div>
                        
                        <div>
                          <span className="text-xs font-medium text-gray-500">Ï†Ñ) Ï°∞ÏπòÎã¥ÎãπÏûê: </span>
                          <span className="text-xs ml-2">{selectedWorkRequest.assignee || 'ÌôçÍ∏∞Ïà†'}</span>
                        </div>
                        
                        <div>
                          <span className="text-xs font-medium text-red-600">Î∞òÎ†§ÏùòÍ≤¨: </span>
                          <span className="text-xs ml-2 text-red-600">Í∏àÏùº Ìú¥Í∞Ä ÏûÖÎãàÎã§.</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200 space-x-3">
              <button
                onClick={() => setShowServiceReassignmentModal(false)}
                className="px-6 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-lg font-medium transition-all duration-200"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={() => {
                  alert('Ïû¨Î∞∞Ï†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
                  setShowServiceReassignmentModal(false)
                }}
                className="px-6 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg font-medium transition-all duration-200"
              >
                Ïû¨Î∞∞Ï†ïÌïòÍ∏∞
              </button>
            </div>
          </div>
        </div>
      )}
      {/* ÏûëÏóÖÏ†ïÎ≥¥Í¥ÄÎ¶¨ Î™®Îã¨ */}
      {showServiceWorkInfoModal && selectedWorkRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="settings" size={24} className="mr-2" />
                ÏûëÏóÖÏ†ïÎ≥¥Í¥ÄÎ¶¨
              </h2>
              <button
                onClick={() => setShowServiceWorkInfoModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© - 2Ïó¥ Î†àÏù¥ÏïÑÏõÉ */}
            <div className="py-4 px-6">
              <div className="grid grid-cols-2 gap-6">
                {/* ÏôºÏ™Ω: ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Î≤àÌò∏: </span>
                      <span className="text-sm font-bold text-red-600">{selectedWorkRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Ï†úÎ™©: </span>
                      <span className="text-sm">{selectedWorkRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedWorkRequest.content}
                    </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requester} ({selectedWorkRequest.department})</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïó∞ÎùΩÏ≤ò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.contact}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏúÑÏπò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏùºÏãú: <span className="text-sm ml-1 text-black">{selectedWorkRequest.requestDate} {selectedWorkRequest.requestTime}</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ÏÉÅÌÉú: 
                      </span>
                      <span className="text-sm ml-5 text-red-600 font-semibold">{selectedWorkRequest.currentStatus}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏã†Ï≤≠Ïûê: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.actualRequester || selectedWorkRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏó∞ÎùΩÏ≤ò: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.actualContact || selectedWorkRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* Ïò§Î•∏Ï™Ω: ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="settings" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù</h3>
                    </div>
                  
                  <div className="space-y-0 py-0">
                    {/* Î∞∞Ï†ï Ï†ïÎ≥¥ */}
                    <div className="bg-gray-50 px-4 py-0 rounded-lg">
                      <div className="space-y-2">
                    <div>
                          <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ïÏùºÏãú :</span>
                          <span className="text-sm text-gray-800 ml-2">{selectedWorkRequest.assignDate || '2025.08.31 10:40'}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ï Îã¥ÎãπÏûê :</span>
                          <span className="text-sm text-gray-800 ml-2">{selectedWorkRequest.assignee || 'Ïù¥Î∞∞Ï†ï'}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">ÏÑúÎπÑÏä§ Ï°∞Ïπò Ï†ïÎ≥¥ :</span>
                          <span className="text-sm text-gray-800 ml-2">{selectedWorkRequest.serviceType || 'Î¨∏Ï†ú'}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">Ï°∞ÏπòÎã¥ÎãπÏûê :</span>
                          <span className="text-sm text-gray-800 ml-2">ÍπÄÍ∏∞Ïà†</span>
                    </div>
                      </div>
                    </div>

                    {/* ÏòàÏ†ï Ï°∞Ïú® ÏùºÏãú */}
                    <div className={`px-4 py-0 rounded-lg border-2 ${(serviceWorkCurrentStage === 'ÏòàÏ†ï' || serviceWorkCurrentStage === 'ÏôÑÎ£å' || serviceWorkCurrentStage === 'ÎØ∏Í≤∞') ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                      <div className="flex items-center gap-4">
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-600 mb-2">ÏòàÏ†ï Ï°∞Ïú® ÏùºÏãú</label>
                      <input
                        type="datetime-local"
                            value={serviceWorkScheduledDate}
                            onChange={(e) => setServiceWorkScheduledDate(e.target.value)}
                            disabled={serviceWorkCurrentStage !== 'ÏòàÏ†ï' && serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞'}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                              (serviceWorkCurrentStage !== 'ÏòàÏ†ï' && serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞') ? 'bg-gray-100 cursor-not-allowed' : ''
                            }`}
                      />
                    </div>
                        {serviceWorkCurrentStage === 'ÏòàÏ†ï' && (
                          <div className="flex items-center gap-2">
                            <Icon name="calendar" className="w-5 h-5 text-gray-400" />
                            <button
                              onClick={() => {
                                if (serviceWorkScheduledDate) {
                                  setServiceWorkCurrentStage('ÏûëÏóÖ')
                                  // ÏûëÏóÖÏãúÏûëÏùºÏãúÏóê ÌòÑÏû¨ ÏãúÏ†ê ÏûêÎèô ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
                                  const now = new Date()
                                  const kstOffset = 9 * 60 // ÌïúÍµ≠ÏùÄ UTC+9
                                  const kstTime = new Date(now.getTime() + (kstOffset * 60 * 1000))
                                  const formattedNow = kstTime.toISOString().slice(0, 16)
                                  setServiceWorkStartDate(formattedNow)
                                  alert('ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãúÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§. ÏûëÏóÖ Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.')
                                } else {
                                  alert('ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                                }
                              }}
                              disabled={!serviceWorkScheduledDate}
                              className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                                serviceWorkScheduledDate
                                  ? 'bg-blue-500 hover:bg-blue-600 text-white'
                                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                              }`}
                            >
                              Ï≤òÎ¶¨
                            </button>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* ÏûëÏóÖ ÏãúÏûë ÏùºÏãú */}
                    <div className={`px-4 py-0 rounded-lg border-2 ${(serviceWorkCurrentStage === 'ÏûëÏóÖ' || serviceWorkCurrentStage === 'ÏôÑÎ£å' || serviceWorkCurrentStage === 'ÎØ∏Í≤∞') ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                      <div className="flex items-center gap-4">
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-600 mb-2">ÏûëÏóÖ ÏãúÏûë ÏùºÏãú</label>
                      <input
                        type="datetime-local"
                            value={serviceWorkStartDate}
                            onChange={(e) => setServiceWorkStartDate(e.target.value)}
                            disabled={serviceWorkCurrentStage !== 'ÏûëÏóÖ' && serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞'}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                              (serviceWorkCurrentStage !== 'ÏûëÏóÖ' && serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞') ? 'bg-gray-100 cursor-not-allowed' : ''
                            }`}
                      />
                    </div>
                        {serviceWorkCurrentStage === 'ÏûëÏóÖ' && (
                          <div className="flex items-center gap-2">
                            <Icon name="calendar" className="w-5 h-5 text-gray-400" />
                            <button
                              onClick={() => {
                                if (serviceWorkStartDate) {
                                  setServiceWorkCurrentStage('ÏôÑÎ£å')
                                  // ÏûëÏóÖÏôÑÎ£åÏùºÏãúÏóê ÌòÑÏû¨ ÏãúÏ†ê ÏûêÎèô ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
                                  const now = new Date()
                                  const kstOffset = 9 * 60 // ÌïúÍµ≠ÏùÄ UTC+9
                                  const kstTime = new Date(now.getTime() + (kstOffset * 60 * 1000))
                                  const formattedNow = kstTime.toISOString().slice(0, 16)
                                  setServiceWorkCompleteDate(formattedNow)
                                  alert('ÏûëÏóÖÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§. ÏôÑÎ£å Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.')
                                } else {
                                  alert('ÏûëÏóÖÏãúÏûëÏùºÏãúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                                }
                              }}
                              disabled={!serviceWorkStartDate}
                              className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                                serviceWorkStartDate
                                  ? 'bg-blue-500 hover:bg-blue-600 text-white'
                                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                              }`}
                            >
                              Ï≤òÎ¶¨
                            </button>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* ÏûëÏóÖ ÎÇ¥Ïó≠ Î∞è ÏôÑÎ£å ÏùºÏãú */}
                    <div className={`px-4 py-0 rounded-lg border-2 ${(serviceWorkCurrentStage === 'ÏôÑÎ£å' || serviceWorkCurrentStage === 'ÎØ∏Í≤∞') ? 'border-blue-300 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                      <div className="space-y-0">
                    <div>
                          <label className="block text-sm font-medium text-gray-600 mb-2">ÏûëÏóÖ ÎÇ¥Ïó≠</label>
                      <textarea
                            value={serviceWorkContent}
                            onChange={(e) => setServiceWorkContent(e.target.value)}
                            disabled={serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞'}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                              (serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞') ? 'bg-gray-100 cursor-not-allowed' : ''
                            }`}
                        rows={3}
                            placeholder="ÏûëÏóÖ ÎÇ¥Ïö© ÏûÖÎ†•"
                          />
                    </div>
                    <div>
                          <label className="block text-sm font-medium text-gray-600 mb-2">ÏûëÏóÖ ÏôÑÎ£å ÏùºÏãú</label>
                      <input
                        type="datetime-local"
                            value={serviceWorkCompleteDate}
                            onChange={(e) => setServiceWorkCompleteDate(e.target.value)}
                            disabled={serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞'}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                              (serviceWorkCurrentStage !== 'ÏôÑÎ£å' && serviceWorkCurrentStage !== 'ÎØ∏Í≤∞') ? 'bg-gray-100 cursor-not-allowed' : ''
                            }`}
                      />
                    </div>
                        {serviceWorkCurrentStage === 'ÏôÑÎ£å' && (
                          <div className="flex justify-end">
                            <button
                              onClick={() => {
                                if (serviceWorkContent && serviceWorkCompleteDate) {
                                  setServiceWorkCurrentStage('ÎØ∏Í≤∞')
                                  alert('ÏûëÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. ÎØ∏Í≤∞ Ï≤òÎ¶¨ Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.')
                                } else {
                                  alert('ÏûëÏóÖÎÇ¥Ïó≠Í≥º ÏûëÏóÖÏôÑÎ£åÏùºÏãúÎ•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                                }
                              }}
                              disabled={!serviceWorkContent || !serviceWorkCompleteDate}
                              className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${
                                serviceWorkContent && serviceWorkCompleteDate
                                  ? 'bg-blue-500 hover:bg-blue-600 text-white'
                                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                              }`}
                            >
                              Ï≤òÎ¶¨
                            </button>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Î¨∏Ï†ú ÏÇ¨Ìï≠ */}
                    <div className={`px-4 py-0 rounded-lg border-2 ${serviceWorkCurrentStage === 'ÎØ∏Í≤∞' ? 'border-orange-300 bg-orange-50' : 'border-gray-200 bg-gray-50'}`}>
                      <div className="flex items-start gap-4">
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-600 mb-2">Î¨∏Ï†ú ÏÇ¨Ìï≠</label>
                      <textarea
                            value={serviceWorkProblemIssue}
                            onChange={(e) => setServiceWorkProblemIssue(e.target.value)}
                            disabled={serviceWorkCurrentStage !== 'ÎØ∏Í≤∞'}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 ${
                              serviceWorkCurrentStage !== 'ÎØ∏Í≤∞' ? 'bg-gray-100 cursor-not-allowed' : ''
                            }`}
                        rows={3}
                            placeholder="ÏûëÏóÖ Ï§ë Î∞úÍ≤¨ Îêú Î¨∏Ï†úÏ†ê ÏûÖÎ†•"
                          />
                    </div>
                        {serviceWorkCurrentStage === 'ÎØ∏Í≤∞' && (
                          <div className="flex items-start gap-2">
                            <button
                              onClick={() => {
                                if (serviceWorkProblemIssue) {
                                  alert('ÎØ∏Í≤∞ Ï≤òÎ¶¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
                                  setServiceWorkCurrentStage('ÎØ∏Í≤∞ÏôÑÎ£å')
                                } else {
                                  alert('Î¨∏Ï†úÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                                }
                              }}
                              className="px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-pink-500 hover:bg-pink-600 text-white"
                            >
                              Îì±Ïû¨
                            </button>
                          </div>
                        )}
                      </div>
                      <div className="mt-3 flex items-center">
                      <input
                        type="checkbox"
                          id="serviceWorkUnresolved"
                          checked={serviceWorkIsUnresolved}
                          onChange={(e) => setServiceWorkIsUnresolved(e.target.checked)}
                          disabled={serviceWorkCurrentStage !== 'ÎØ∏Í≤∞'}
                          className={`mr-2 ${serviceWorkCurrentStage !== 'ÎØ∏Í≤∞' ? 'cursor-not-allowed' : ''}`}
                        />
                        <label htmlFor="serviceWorkUnresolved" className={`text-sm font-medium ${
                          serviceWorkCurrentStage !== 'ÎØ∏Í≤∞' ? 'text-gray-400' : 'text-gray-700'
                        }`}>
                          ÎØ∏Í≤∞ ÏôÑÎ£å
                        </label>
                    </div>
                      
                    </div>

                  </div>
                  </div>
                </div>
              </div>

              {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
                <button
                  onClick={() => setShowServiceWorkInfoModal(false)}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  onClick={() => {
                    setShowServiceWorkInfoModal(false);
                  setShowServiceWorkCompleteModal(true);
                  }}
                className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                >
                  ÏàòÏ†ïÏôÑÎ£å
                </button>
            </div>
          </div>
        </div>
      )}
      {/* ÏûëÏóÖÏ†ïÎ≥¥ÏÇ≠Ï†ú Î™®Îã¨ */}
      {showServiceWorkDeleteModal && selectedWorkRequest && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="trash" size={24} className="mr-2 text-red-600" />
                ÏûëÏóÖÏ†ïÎ≥¥ÏÇ≠Ï†ú
              </h2>
              <button
                onClick={() => setShowServiceWorkDeleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* ÏÑúÎπÑÏä§ Ïã†Ï≤≠ Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏÑúÎπÑÏä§Ïã†Ï≤≠Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Î≤àÌò∏: </span>
                      <span className="text-sm font-bold text-red-600">{selectedWorkRequest.requestNumber}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠Ï†úÎ™©: </span>
                      <span className="text-sm">{selectedWorkRequest.title}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã†Ï≤≠ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedWorkRequest.content}
                    </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="user" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïûê: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.requester} ({selectedWorkRequest.department})</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="mail" size={14} className="mr-1" />
                        Ïã†Ï≤≠Ïó∞ÎùΩÏ≤ò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.contact}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="briefcase" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏúÑÏπò: 
                      </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.location}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="calendar" size={14} className="mr-1" />
                        Ïã†Ï≤≠ÏùºÏãú: <span className="text-sm ml-1 text-black">{selectedWorkRequest.requestDate} {selectedWorkRequest.requestTime}</span>
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600 flex items-center">
                        <Icon name="message-square" size={14} className="mr-1" />
                        ÌòÑÏû¨ÏÉÅÌÉú: 
                      </span>
                      <span className="text-sm ml-5 text-red-600 font-semibold">{selectedWorkRequest.currentStatus}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏã†Ï≤≠Ïûê: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.actualRequester || selectedWorkRequest.requester}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Ïã§Ï†úÏó∞ÎùΩÏ≤ò: </span>
                      <span className="text-sm ml-5">{selectedWorkRequest.actualContact || selectedWorkRequest.contact}</span>
                    </div>
                  </div>
                </div>

                {/* ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="settings" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÏûëÏóÖÏ†ïÎ≥¥Îì±Î°ù</h3>
                  </div>
                  
                  <div className="space-y-0 py-0">
                    {/* Î∞∞Ï†ï Ï†ïÎ≥¥ */}
                    <div className="bg-gray-50 px-4 py-0 rounded-lg">
                      <div className="space-y-2">
                    <div>
                          <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ïÏùºÏãú :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.assignDate || '2025.08.31 10:40'}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ïÎã¥ÎãπÏûê :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.assignee || 'Ïù¥Î∞∞Ï†ï'}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">Î∞∞Ï†ïÏùòÍ≤¨ :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.assignmentOpinion || 'ÏóÖÎ¨¥Ïóê Ï†ÅÌï©ÌïòÏó¨ Î∞∞Ï†ï'}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">ÏÑúÎπÑÏä§Ïú†Ìòï :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.serviceType}</span>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">Ï°∞ÏπòÎã¥ÎãπÏûê :</span>
                          <span className="text-sm ml-2">ÍπÄÍ∏∞Ïà†</span>
                    </div>
                      </div>
                    </div>

                    {/* ÏòàÏ†ï Ï°∞Ïú® ÏùºÏãú */}
                    <div className="bg-gray-50 px-4 py-0 rounded-lg">
                      <div className="space-y-2">
                    <div>
                          <span className="text-sm font-medium text-gray-600">ÏòàÏ†ïÏ°∞Ïú®ÏùºÏãú :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.scheduledDate || '2025.08.31 15:00'}</span>
                    </div>
                      </div>
                    </div>

                    {/* ÏûëÏóÖ ÏãúÏûë ÏùºÏãú */}
                    <div className="bg-gray-50 px-4 py-0 rounded-lg">
                      <div className="space-y-2">
                    <div>
                          <span className="text-sm font-medium text-gray-600">ÏûëÏóÖÏãúÏûëÏùºÏãú :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.workStartDate || '2025.09.01 15:00'}</span>
                    </div>
                      </div>
                    </div>

                    {/* ÏûëÏóÖ ÎÇ¥Ïó≠ Î∞è ÏôÑÎ£å ÏùºÏãú */}
                    <div className="bg-gray-50 px-4 py-0 rounded-lg">
                      <div className="space-y-2">
                    <div>
                          <span className="text-sm font-medium text-gray-600">ÏûëÏóÖÎÇ¥Ïó≠ :</span>
                          <div className="text-sm mt-1 p-2 bg-white rounded border text-gray-700 min-h-16 max-h-32 overflow-y-auto whitespace-pre-wrap">
                            {selectedWorkRequest.workContent || 'ÏûëÏóÖ ÎÇ¥Ïö© ÏàòÏ†ï'}
                          </div>
                    </div>
                    <div>
                          <span className="text-sm font-medium text-gray-600">ÏûëÏóÖÏôÑÎ£åÏùºÏãú :</span>
                          <span className="text-sm ml-2">{selectedWorkRequest.workCompleteDate || '2025.08.31 15:00'}</span>
                    </div>
                      </div>
                    </div>

                    {/* Î¨∏Ï†ú ÏÇ¨Ìï≠ */}
                    <div className="bg-gray-50 px-4 py-0 rounded-lg">
                      <div className="space-y-2">
                    <div>
                          <span className="text-sm font-medium text-gray-600">Î¨∏Ï†úÏÇ¨Ìï≠ :</span>
                          <div className="text-sm mt-1 p-2 bg-white rounded border text-gray-700 min-h-16 max-h-32 overflow-y-auto whitespace-pre-wrap">
                            {selectedWorkRequest.problemIssue || 'ÏûëÏóÖ Ï§ë Î∞úÍ≤¨Îêú Î¨∏Ï†úÏ†ê ÏàòÏ†ï'}
                          </div>
                    </div>
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                            id="unresolved-delete-display"
                        className="mr-2"
                            checked={selectedWorkRequest.isUnresolved || false}
                        readOnly
                      />
                          <label htmlFor="unresolved-delete-display" className="text-sm font-medium text-gray-600">
                            ÎØ∏Í≤∞ÏôÑÎ£å
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* ÏÇ≠Ï†ú ÌôïÏù∏ Î©îÏãúÏßÄ */}
              <div className="mt-8 p-4 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center">
                  <div className="text-red-800">
                    <p className="font-medium">‚ö†Ô∏è ÏûëÏóÖÏ†ïÎ≥¥Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?</p>
                    <p className="text-sm mt-1">ÏÇ≠Ï†úÎêú ÏûëÏóÖÏ†ïÎ≥¥Îäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
                <button
                  onClick={() => setShowServiceWorkDeleteModal(false)}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  onClick={() => {
                    if (confirm('Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                      setShowServiceWorkDeleteModal(false);
                    setShowServiceWorkDeleteCompleteModal(true);
                      // ÏÇ≠Ï†ú ÏôÑÎ£å Î°úÏßÅ
                    }
                  }}
                className="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                >
                  ÏÇ≠Ï†úÌïòÍ∏∞
                </button>
              </div>
          </div>
        </div>
      )}

      {/* ÏûëÏóÖÏ†ïÎ≥¥ÏàòÏ†ï ÏôÑÎ£å Î™®Îã¨ */}
      {showServiceWorkCompleteModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="check-circle" size={24} className="mr-2 text-green-600" />
                ÏàòÏ†ï ÏôÑÎ£å
              </h2>
              <button
                onClick={() => setShowServiceWorkCompleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="check-circle" size={32} className="text-green-600" />
              </div>
              <p className="text-gray-600 mb-6">ÏûëÏóÖÏ†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowServiceWorkCompleteModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
      {/* ÏûëÏóÖÏ†ïÎ≥¥ÏÇ≠Ï†ú ÏôÑÎ£å Î™®Îã¨ */}
      {showServiceWorkDeleteCompleteModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="check-circle" size={24} className="mr-2 text-green-600" />
                ÏÇ≠Ï†ú ÏôÑÎ£å
              </h2>
              <button
                onClick={() => setShowServiceWorkDeleteCompleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="check-circle" size={32} className="text-green-600" />
              </div>
              <p className="text-gray-600 mb-6">ÏûëÏóÖÏ†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowServiceWorkDeleteCompleteModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
      {/* ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏ Í¥ÄÎ¶¨ ÌîÑÎ†àÏûÑ */}
      {showFAQManagement && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-7xl w-full mx-4 max-h-[90vh] overflow-hidden">
            {/* ÌîÑÎ†àÏûÑ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="help-circle" size={24} className="mr-2 text-blue-600" />
                ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏ Í¥ÄÎ¶¨
              </h2>
              <button
                onClick={() => setShowFAQManagement(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* ÌîÑÎ†àÏûÑ ÎÇ¥Ïö© */}
            <div className="p-6 overflow-y-auto" style={{maxHeight: 'calc(90vh - 120px)'}}>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {/* FAQ Ïπ¥ÎìúÎì§ */}
                {(() => {
                  // FAQ Îç∞Ïù¥ÌÑ∞ (ÏùºÎ∞òÏÇ¨Ïö©Ïûê ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùº)
                  const faqs = [
                    {
                      id: '1',
                      icon: 'üìß',
                      summary: 'Ïù¥Î©îÏùº Ï†ëÏÜç Î∂àÍ∞Ä',
                      content: 'Ïù¥Î©îÏùº ÏÑúÎπÑÏä§Ïóê Ï†ëÏÜçÌï† Ïàò ÏóÜÎäî Í≤ΩÏö∞ Î∞úÏÉùÌïòÎäî Î¨∏Ï†úÏûÖÎãàÎã§.',
                      category: 'Ïù¥Î©îÏùº',
                      solution: '1. Î∏åÎùºÏö∞Ï†Ä Ï∫êÏãú Î∞è Ïø†ÌÇ§ ÏÇ≠Ï†ú\n2. Îã§Î•∏ Î∏åÎùºÏö∞Ï†ÄÎ°ú ÏãúÎèÑ\n3. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏',
                      persistentIssue: 'ÏúÑ Î∞©Î≤ïÏúºÎ°ú Ìï¥Í≤∞ÎêòÏßÄ ÏïäÏúºÎ©¥ ITÌåÄÏóê Î¨∏ÏùòÌï¥ Ï£ºÏÑ∏Ïöî!'
                    },
                    {
                      id: '2',
                      icon: 'üì§',
                      summary: 'ÌååÏùº ÏóÖÎ°úÎìú Ïò§Î•ò',
                      content: 'ÌååÏùº ÏóÖÎ°úÎìú Ïãú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïòÎäî Í≤ΩÏö∞ÏûÖÎãàÎã§.',
                      category: 'ÌååÏùºÏÑúÎ≤Ñ'
                    },
                    {
                      id: '3',
                      icon: 'üîí',
                      summary: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïò§Î•ò',
                      content: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïù¥ ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Î∞úÏÉùÌïòÎäî Î¨∏Ï†úÏûÖÎãàÎã§.',
                      category: 'ÎÑ§Ìä∏ÏõåÌÅ¨'
                    },
                    {
                      id: '4',
                      icon: 'üåê',
                      summary: 'ÏõπÏÇ¨Ïù¥Ìä∏ Ï†ëÏÜç Î∂àÍ∞Ä',
                      content: 'ÎÇ¥Î∂Ä ÏõπÏÇ¨Ïù¥Ìä∏Ïóê Ï†ëÏÜçÌï† Ïàò ÏóÜÎäî Í≤ΩÏö∞ÏûÖÎãàÎã§.',
                      category: 'ÏõπÏÑúÎπÑÏä§'
                    },
                    {
                      id: '5',
                      icon: 'üñ®Ô∏è',
                      summary: 'ÌîÑÎ¶∞ÌÑ∞ Ïù∏ÏáÑ Ïò§Î•ò',
                      content: 'ÌîÑÎ¶∞ÌÑ∞ Ïù∏ÏáÑÍ∞Ä ÎêòÏßÄ ÏïäÎäî Í≤ΩÏö∞ÏûÖÎãàÎã§.',
                      category: 'ÌïòÎìúÏõ®Ïñ¥',
                      solution: '1. ÌîÑÎ¶∞ÌÑ∞ Ï†ÑÏõê Î∞è Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏\n2. ÌîÑÎ¶∞ÌÑ∞ ÎìúÎùºÏù¥Î≤Ñ Ïû¨ÏÑ§Ïπò\n3. ÌîÑÎ¶∞ÌÑ∞ ÌÅê Ï¥àÍ∏∞Ìôî',
                      persistentIssue: 'ÏúÑ Î∞©Î≤ïÏúºÎ°ú Ìï¥Í≤∞ÎêòÏßÄ ÏïäÏúºÎ©¥ ÌïòÎìúÏõ®Ïñ¥ Îã¥ÎãπÏûêÏóêÍ≤å Ïó∞ÎùΩÌï¥ Ï£ºÏÑ∏Ïöî!'
                    },
                    {
                      id: '6',
                      icon: 'üíª',
                      summary: 'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÏÑ§Ïπò',
                      content: 'ÏÉàÎ°úÏö¥ ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÏÑ§Ïπò ÏöîÏ≤≠ÏûÖÎãàÎã§.',
                      category: 'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥'
                    },
                    {
                      id: '7',
                      icon: 'üñ•Ô∏è',
                      summary: 'Ïª¥Ìì®ÌÑ∞ ÎäêÎ¶º ÌòÑÏÉÅ',
                      content: 'Ïª¥Ìì®ÌÑ∞Í∞Ä Í∞ëÏûêÍ∏∞ ÎäêÎ†§ÏßÄÎäî ÌòÑÏÉÅÏûÖÎãàÎã§.',
                      category: 'ÏÑ±Îä•'
                    },
                    {
                      id: '8',
                      icon: 'üîê',
                      summary: 'ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî',
                      content: 'ÏãúÏä§ÌÖú Î°úÍ∑∏Ïù∏ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûäÏñ¥Î≤ÑÎ¶∞ Í≤ΩÏö∞ÏûÖÎãàÎã§.',
                      category: 'Î≥¥Ïïà'
                    },
                    {
                      id: '9',
                      icon: 'üì±',
                      summary: 'Î™®Î∞îÏùº Ïï± Ïò§Î•ò',
                      content: 'Î™®Î∞îÏùº Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏóêÏÑú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïòÎäî Í≤ΩÏö∞ÏûÖÎãàÎã§.',
                      category: 'Î™®Î∞îÏùº'
                    },
                    {
                      id: '10',
                      icon: 'üîß',
                      summary: 'ÏãúÏä§ÌÖú Ïò§Î•ò',
                      content: 'ÏãúÏä§ÌÖúÏóêÏÑú ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïòÎäî Í≤ΩÏö∞ÏûÖÎãàÎã§.',
                      category: 'ÏãúÏä§ÌÖú'
                    },
                    {
                      id: '11',
                      icon: 'üíæ',
                      summary: 'Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ',
                      content: 'Ï§ëÏöîÌïú Îç∞Ïù¥ÌÑ∞Î•º Î∞±ÏóÖÌïòÎäî Î∞©Î≤ïÏûÖÎãàÎã§.',
                      category: 'Îç∞Ïù¥ÌÑ∞'
                    },
                    {
                      id: '12',
                      icon: 'üåç',
                      summary: 'ÏõêÍ≤© Ï†ëÏÜç Ïò§Î•ò',
                      content: 'ÏõêÍ≤© Ï†ëÏÜç Ïãú Î∞úÏÉùÌïòÎäî Î¨∏Ï†úÏûÖÎãàÎã§.',
                      category: 'ÏõêÍ≤©Ï†ëÏÜç'
                    }
                  ]

                  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î°úÏßÅ
                  const itemsPerPage = 6
                  const totalPages = Math.ceil(faqs.length / itemsPerPage)
                  const currentFAQs = faqs.slice(
                    (faqCurrentPage - 1) * itemsPerPage,
                    faqCurrentPage * itemsPerPage
                  )

                  return (
                    <>
                      {currentFAQs.map((faq) => (
                        <div
                          key={faq.id}
                          className="bg-white rounded-xl cursor-pointer hover:shadow-2xl transition-all duration-500 ease-out transform hover:scale-105 flex flex-col h-full border-2 border-gray-200 hover:border-blue-300"
                          style={{padding: '20px 30px'}}
                          onClick={() => {
                            setSelectedFAQ(faq)
                            setShowFAQEditModal(true)
                          }}
                        >
                          <div className="text-left mb-5 flex-1" style={{paddingTop: '15px'}}>
                            <div className="mb-3 text-center" style={{fontSize: '36px'}}>{faq.icon}</div>
                            <h3 className="text-xl font-bold text-gray-800 mb-3 text-center">
                              {faq.summary}
                            </h3>
                            <p className="text-gray-600 leading-relaxed mb-4 line-clamp-2 overflow-hidden">
                              {faq.content}
                            </p>
                          </div>
                          <div className="flex justify-between items-center mt-auto">
                            <span className="text-sm px-4 rounded-full bg-blue-100 text-blue-800 font-medium" style={{paddingTop: '0px', paddingBottom: '0px'}}>
                              {faq.category}
                            </span>
                            <div className="flex space-x-2">
                              <button 
                                onClick={(e) => {
                                  e.stopPropagation(); // Ïù¥Î≤§Ìä∏ Î≤ÑÎ∏îÎßÅ Î∞©ÏßÄ
                                  setSelectedFAQ(faq);
                                  setShowFAQEditModal(true);
                                }}
                                className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                              >
                                ÏàòÏ†ï
                              </button>
                              <button 
                                onClick={(e) => {
                                  e.stopPropagation(); // Ïù¥Î≤§Ìä∏ Î≤ÑÎ∏îÎßÅ Î∞©ÏßÄ
                                  if (confirm('Ïù¥ FAQÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                                    // ÏÇ≠Ï†ú Î°úÏßÅ Ï∂îÍ∞Ä
                                    alert('FAQÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                                    // FAQ Í¥ÄÎ¶¨ ÌîÑÎ†àÏûÑÏùÄ Ïú†ÏßÄ (Îã´ÏßÄ ÏïäÏùå)
                                  }
                                }}
                                className="text-red-600 hover:text-red-800 text-sm font-medium"
                              >
                                ÏÇ≠Ï†ú
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </>
                  )
                })()}
              </div>

              {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
              {(() => {
                const faqs = [
                  { id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }, { id: '5' }, { id: '6' },
                  { id: '7' }, { id: '8' }, { id: '9' }, { id: '10' }, { id: '11' }, { id: '12' }
                ]
                const itemsPerPage = 6
                const totalPages = Math.ceil(faqs.length / itemsPerPage)
                
                return totalPages > 1 && (
                  <div className="flex justify-center items-center space-x-4 mt-8">
                    <button
                      onClick={() => setFaqCurrentPage(Math.max(1, faqCurrentPage - 1))}
                      disabled={faqCurrentPage === 1}
                      className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300 transition-all duration-300 ease-out button-smooth"
                    >
                      Ïù¥Ï†Ñ
                    </button>
                    <span className="px-4 py-2 bg-blue-600 text-white rounded-lg">
                      {faqCurrentPage} / {totalPages}
                    </span>
                    <button
                      onClick={() => setFaqCurrentPage(Math.min(totalPages, faqCurrentPage + 1))}
                      disabled={faqCurrentPage === totalPages}
                      className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300 transition-all duration-300 ease-out button-smooth"
                    >
                      Îã§Ïùå
                    </button>
                  </div>
                )
              })()}
            </div>

            {/* ÌîÑÎ†àÏûÑ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-between items-center py-4 px-6 border-t border-gray-200">
              <div className="flex items-center space-x-3">
                <button
                  onClick={() => setShowFAQAddModal(true)}
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 ease-out button-smooth flex items-center space-x-2"
                >
                  <Icon name="plus" size={16} />
                  <span>ÏßàÎ¨∏ Ï∂îÍ∞Ä</span>
                </button>
              </div>
              <div className="flex items-center space-x-4">
                {(() => {
                  const faqs = [
                    { id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }, { id: '5' }, { id: '6' },
                    { id: '7' }, { id: '8' }, { id: '9' }, { id: '10' }, { id: '11' }, { id: '12' }
                  ]
                  const itemsPerPage = 6
                  const totalPages = Math.ceil(faqs.length / itemsPerPage)
                  return (
                    <span className="text-sm text-gray-500">{faqCurrentPage} / {totalPages} ÌéòÏù¥ÏßÄ</span>
                  )
                })()}
                <button
                  onClick={() => setShowFAQManagement(false)}
                  className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
                >
                  Îã´Í∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* FAQ ÏàòÏ†ï Î™®Îã¨ */}
      {showFAQEditModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center p-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-2xl font-bold text-gray-800">ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏-ÏàòÏ†ï</h2>
              <button
                onClick={() => setShowFAQEditModal(false)}
                className="text-gray-500 hover:text-gray-700 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="p-6 overflow-y-auto" style={{maxHeight: 'calc(90vh - 120px)'}}>
              {/* ÏïÑÏù¥ÏΩò ÏÑπÏÖò */}
              <div className="flex items-center justify-center mb-8">
                <div className="flex flex-col items-center space-y-4">
                  <div className="text-6xl">{selectedFAQ?.icon || 'üìß'}</div>
                  <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 ease-out button-smooth">
                    Icon Î≥ÄÍ≤Ω
                  </button>
                </div>
              </div>

              {/* ÏûÖÎ†• ÌïÑÎìúÎì§ */}
              <div className="space-y-6">
                {/* Î∞úÏÉù ÏõêÏù∏ ÏöîÏïΩ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Î∞úÏÉù ÏõêÏù∏ ÏöîÏïΩ
                  </label>
                  <input
                    type="text"
                    defaultValue={selectedFAQ?.summary || ''}
                    className="w-full px-4 py-0 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                    placeholder="Î∞úÏÉù ÏõêÏù∏ ÏöîÏïΩÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                </div>

                {/* Î∞úÏÉù ÏõêÏù∏ ÎÇ¥Ïö© */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Î∞úÏÉù ÏõêÏù∏ ÎÇ¥Ïö©
                  </label>
                  <textarea
                    defaultValue={selectedFAQ?.content || ''}
                    rows={3}
                    className="w-full px-4 py-0 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                    placeholder="Î∞úÏÉù ÏõêÏù∏ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                </div>

                {/* Ï¶âÏãú Ìï¥Í≤∞Î∞©Î≤ï */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Ï¶âÏãú Ìï¥Í≤∞Î∞©Î≤ï
                  </label>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <textarea
                      defaultValue={selectedFAQ?.solution || "1. Î∏åÎùºÏö∞Ï†Ä Ï∫êÏãú Î∞è Ïø†ÌÇ§ ÏÇ≠Ï†ú\n2. Îã§Î•∏ Î∏åÎùºÏö∞Ï†ÄÎ°ú ÏãúÎèÑ\n3. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏"}
                      rows={4}
                      className="w-full px-4 py-0 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 bg-white"
                      placeholder="Ï¶âÏãú Ìï¥Í≤∞Î∞©Î≤ïÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    />
                  </div>
                </div>

                {/* Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞
                  </label>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <textarea
                      defaultValue={selectedFAQ?.persistentIssue || "ÏúÑ Î∞©Î≤ïÏúºÎ°ú Ìï¥Í≤∞ÎêòÏßÄ ÏïäÏúºÎ©¥ ÏïÑÎûò ÏÑúÎπÑÏä§ Ïã†Ï≤≠ Ìï¥ Ï£ºÏÑ∏Ïöî!"}
                      rows={2}
                      className="w-full px-4 py-0 border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-all duration-200 bg-white"
                      placeholder="Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞ ÏïàÎÇ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-center items-center py-6 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowFAQEditModal(false)
                  setShowFAQCompleteModal(true)
                  // ÏàòÏ†ï Î°úÏßÅ Ï∂îÍ∞Ä
                }}
                className="bg-black hover:bg-gray-800 text-white px-8 py-3 rounded-lg font-medium transition-all duration-300 ease-out button-smooth"
              >
                ÏàòÏ†ï
              </button>
            </div>
          </div>
        </div>
      )}

      {/* FAQ Ï∂îÍ∞Ä Î™®Îã¨ */}
      {showFAQAddModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center p-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-2xl font-bold text-gray-800">ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏-Ï∂îÍ∞Ä</h2>
              <button
                onClick={() => setShowFAQAddModal(false)}
                className="text-gray-500 hover:text-gray-700 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="p-6 overflow-y-auto" style={{maxHeight: 'calc(90vh - 120px)'}}>
              {/* ÏïÑÏù¥ÏΩò ÏÑπÏÖò */}
              <div className="flex items-center justify-center mb-8">
                <div className="flex flex-col items-center space-y-4">
                  <div className="text-6xl">üìß</div>
                  <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 ease-out button-smooth">
                    Icon Î≥ÄÍ≤Ω
                  </button>
                </div>
              </div>

              {/* ÏûÖÎ†• ÌïÑÎìúÎì§ */}
              <div className="space-y-6">
                {/* Î∞úÏÉù ÏõêÏù∏ ÏöîÏïΩ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Î∞úÏÉù ÏõêÏù∏ ÏöîÏïΩ
                  </label>
                  <input
                    type="text"
                    className="w-full px-4 py-0 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                    placeholder="Î∞úÏÉù ÏõêÏù∏ ÏöîÏïΩÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                </div>

                {/* Î∞úÏÉù ÏõêÏù∏ ÎÇ¥Ïö© */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Î∞úÏÉù ÏõêÏù∏ ÎÇ¥Ïö©
                  </label>
                  <textarea
                    rows={3}
                    className="w-full px-4 py-0 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                    placeholder="Î∞úÏÉù ÏõêÏù∏ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  />
                </div>

                {/* Ï¶âÏãú Ìï¥Í≤∞Î∞©Î≤ï */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Ï¶âÏãú Ìï¥Í≤∞Î∞©Î≤ï
                  </label>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <textarea
                      rows={4}
                      className="w-full px-4 py-0 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 bg-white"
                      placeholder="Ï¶âÏãú Ìï¥Í≤∞Î∞©Î≤ïÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    />
                  </div>
                </div>

                {/* Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-0">
                    Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞
                  </label>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <textarea
                      rows={2}
                      className="w-full px-4 py-0 border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-all duration-200 bg-white"
                      placeholder="Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞ ÏïàÎÇ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-center items-center py-6 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowFAQAddModal(false)
                  setShowFAQCompleteModal(true)
                  // Ï∂îÍ∞Ä Î°úÏßÅ Ï∂îÍ∞Ä
                }}
                className="bg-black hover:bg-gray-800 text-white px-8 py-3 rounded-lg font-medium transition-all duration-300 ease-out button-smooth"
              >
                Ï∂îÍ∞Ä
              </button>
            </div>
          </div>
        </div>
      )}

      {/* FAQ ÏôÑÎ£å Î™®Îã¨ */}
      {showFAQCompleteModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="check-circle" size={24} className="mr-2 text-green-600" />
                ÏôÑÎ£å
              </h2>
              <button
                onClick={() => setShowFAQCompleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Icon name="check-circle" size={32} className="text-green-600" />
              </div>
              <p className="text-gray-600 mb-6">FAQÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§.</p>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex justify-end py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowFAQCompleteModal(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
      {/* ÏùºÎ∞òÎ¨∏Ïùò List Í¥ÄÎ¶¨ ÌîÑÎ†àÏûÑ */}
      {showGeneralInquiryList && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-7xl w-full mx-4 max-h-[90vh] overflow-hidden">
            {/* ÌîÑÎ†àÏûÑ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    setGeneralInquiryCurrentPage(1);
                    setShowUnansweredOnly(false);
                    const oneWeekAgo = new Date()
                    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)
                    setGeneralInquirySearchStartDate(oneWeekAgo.toISOString().split('T')[0]);
                    setGeneralInquirySearchEndDate(new Date().toISOString().split('T')[0]);
                  }}
                  className="w-6 h-6 text-gray-600 hover:text-gray-800 transition-colors"
                >
                  <Icon name="refresh" size={16} />
                </button>
                <h2 className="text-xl font-bold text-gray-800">ÏùºÎ∞ò Î¨∏Ïùò ÎãµÎ≥Ä</h2>
              </div>
              <button
                onClick={() => setShowGeneralInquiryList(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ ÏòÅÏó≠ */}
            <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-4">
                  {/* ÎÇ†Ïßú ÏÑ†ÌÉù */}
                  <div className="flex items-center space-x-2">
                    <input
                      type="date"
                      value={generalInquirySearchStartDate}
                      onChange={(e) => setGeneralInquirySearchStartDate(e.target.value)}
                      className="px-3 py-2 border-2 border-gray-400 rounded-lg text-sm font-medium bg-white shadow-sm focus:border-blue-500 focus:outline-none"
                    />
                    <span className="text-gray-600 font-medium">~</span>
                    <input
                      type="date"
                      value={generalInquirySearchEndDate}
                      onChange={(e) => setGeneralInquirySearchEndDate(e.target.value)}
                      className="px-3 py-2 border-2 border-gray-400 rounded-lg text-sm font-medium bg-white shadow-sm focus:border-blue-500 focus:outline-none"
                    />
                  </div>
                </div>
                
                {/* ÎØ∏ÎãµÎ≥ÄÎßåÏ°∞Ìöå ÌÜ†Í∏Ä - Ïö∞Ï∏° ÎÅù Î∞∞Ïπò */}
                <div className="flex items-center space-x-3">
                  <span className="text-sm font-medium text-gray-700">ÎØ∏ÎãµÎ≥ÄÎßåÏ°∞Ìöå</span>
                  <button
                    onClick={() => setShowUnansweredOnly(!showUnansweredOnly)}
                    className={`w-8 h-4 rounded-full transition-colors ${
                      showUnansweredOnly ? 'bg-green-500' : 'bg-gray-400'
                    }`}
                  >
                    <div className={`w-3 h-3 bg-white rounded-full transition-transform ${
                      showUnansweredOnly ? 'translate-x-4' : 'translate-x-0.5'
                    }`} />
                  </button>
                </div>
              </div>
            </div>

            {/* ÌÖåÏù¥Î∏î ÏòÅÏó≠ */}
            <div className="flex-1 overflow-hidden">
              <div className="overflow-x-auto overflow-y-auto px-4" style={{height: '450px'}}>
                <table className="w-full text-sm">
                  <thead className="sticky top-0" style={{backgroundColor: '#D4B8F9'}}>
                    <tr>
                      <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Î¨∏ÏùòÏùºÏãú</th>
                      <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Î¨∏ÏùòÏ†úÎ™©</th>
                      <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Î¨∏ÏùòÏûê</th>
                      <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">ÎãµÎ≥ÄÏùºÏãú</th>
                      <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">ÎãµÎ≥ÄÏûê</th>
                      <th className="px-2 py-2 text-center text-sm font-bold text-purple-800">Í¥ÄÎ¶¨</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {(() => {
                      // ÏùºÎ∞òÎ¨∏Ïùò Îç∞Ïù¥ÌÑ∞ (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ Îçî ÎßéÏùÄ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä)
                      const inquiries = [
                        {
                          id: '1',
                          inquiryDate: '2025.08.31 14:00',
                          title: 'Î™®ÎãàÌÑ∞ Ï†ÑÏõê Î¨∏Ïùò',
                          inquirer: 'ÌôçÍ∏∏Ïàú',
                          answerDate: '2025.08.31 15:00',
                          answerer: 'Ïù¥Î∞∞Ï†ï',
                          content: 'Î™®ÎãàÌÑ∞Ïóê Ï†ÑÏõêÏù¥ Îì§Ïñ¥Ïò§ÏßÄ ÏïäÏäµÎãàÎã§.',
                          answerContent: 'Î™®ÎãàÌÑ∞ Ï†ÑÏõê ÏºÄÏù¥Î∏îÎ•º ÌïúÎ≤à Îçî ÍºΩÏïÑ Ï£ºÏÑ∏Ïöî! Î™®ÎãàÌÑ∞ Ï†ÑÏõê Î≤ÑÌäºÏùÑ Ïºú Ï£ºÏã≠ÏãúÏöî Ïù¥ÏÉÅÍ≥º Í∞ôÏù¥ Ï°∞ÏπòÍ∞Ä ÎêòÏßÄ ÏïäÏùÑ Îî∞Îäî ÏÑúÎπÑÏä§ Ïã†Ï≤≠ Ìï¥ Ï£ºÏÑ∏Ïöî!'
                        },
                        {
                          id: '2',
                          inquiryDate: '2025.08.31 13:00',
                          title: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ïùò',
                          inquirer: 'ÍπÄÏòÅÏûê',
                          answerDate: '',
                          answerer: '',
                          content: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïù¥ Ïïà Îê©ÎãàÎã§.'
                        },
                        {
                          id: '3',
                          inquiryDate: '2025.08.31 12:00',
                          title: 'ÌîÑÎ¶∞ÌÑ∞ ÎìúÎùºÏù¥Î≤Ñ ÏóÖÎç∞Ïù¥Ìä∏',
                          inquirer: 'Ïù¥ÏòÅÌù¨',
                          answerDate: '',
                          answerer: '',
                          content: 'ÌîÑÎ¶∞ÌÑ∞ ÎìúÎùºÏù¥Î≤ÑÎ•º ÏµúÏã† Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.'
                        },
                        {
                          id: '4',
                          inquiryDate: '2025.08.31 11:00',
                          title: 'Ïù¥Î©îÏùº Î¨∏Ïùò',
                          inquirer: 'Î∞ïÎã¨Ïûê',
                          answerDate: '2025.08.31 12:00',
                          answerer: 'Ïù¥Î∞∞Ï†ï',
                          content: 'Ïù¥Î©îÏùº Ï†ëÏÜçÏù¥ Ïïà Îê©ÎãàÎã§.',
                          answerContent: 'Ïù¥Î©îÏùº Í≥ÑÏ†ï ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî. ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ïû¨ÏÑ§Ï†ïÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥ Î≥¥ÏÑ∏Ïöî.'
                        },
                        {
                          id: '5',
                          inquiryDate: '2025.08.31 10:00',
                          title: 'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÏÑ§Ïπò ÏöîÏ≤≠',
                          inquirer: 'ÏµúÎØºÏàò',
                          answerDate: '',
                          answerer: '',
                          content: 'ÏÉàÎ°úÏö¥ ÏÜåÌîÑÌä∏Ïõ®Ïñ¥Î•º ÏÑ§ÏπòÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.'
                        },
                        {
                          id: '6',
                          inquiryDate: '2025.08.31 09:30',
                          title: 'ÌÇ§Î≥¥Îìú Í≥†Ïû• Î¨∏Ïùò',
                          inquirer: 'Ï†ïÏàòÏßÑ',
                          answerDate: '2025.08.31 10:30',
                          answerer: 'ÍπÄÍ∏∞Ïà†',
                          content: 'ÌÇ§Î≥¥ÎìúÍ∞Ä ÏûëÎèôÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
                          answerContent: 'ÌÇ§Î≥¥Îìú Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥†, Îã§Î•∏ Ìè¨Ìä∏Ïóê Ïó∞Í≤∞Ìï¥ Î≥¥ÏÑ∏Ïöî. Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎêòÎ©¥ ÍµêÏ≤¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
                        },
                        {
                          id: '7',
                          inquiryDate: '2025.08.31 09:00',
                          title: 'ÏõπÏÇ¨Ïù¥Ìä∏ Ï†ëÏÜç Î∂àÍ∞Ä',
                          inquirer: 'Í∞ïÏßÄÌõà',
                          answerDate: '',
                          answerer: '',
                          content: 'ÎÇ¥Î∂Ä ÏõπÏÇ¨Ïù¥Ìä∏Ïóê Ï†ëÏÜçÌï† Ïàò ÏóÜÏäµÎãàÎã§.'
                        },
                        {
                          id: '8',
                          inquiryDate: '2025.08.30 16:30',
                          title: 'ÎßàÏö∞Ïä§ Î∞òÏùë ÏßÄÏó∞',
                          inquirer: 'Ïú§ÏÑúÏó∞',
                          answerDate: '2025.08.30 17:00',
                          answerer: 'Ïù¥Î∞∞Ï†ï',
                          content: 'ÎßàÏö∞Ïä§Í∞Ä ÎäêÎ¶¨Í≤å Î∞òÏùëÌï©ÎãàÎã§.',
                          answerContent: 'ÎßàÏö∞Ïä§ ÎìúÎùºÏù¥Î≤ÑÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥†, USB Ìè¨Ìä∏Î•º Î≥ÄÍ≤ΩÌï¥ Î≥¥ÏÑ∏Ïöî.'
                        },
                        {
                          id: '9',
                          inquiryDate: '2025.08.30 15:00',
                          title: 'Ìè¥Îçî Í∂åÌïú Î¨∏Ïùò',
                          inquirer: 'ÏÜ°ÌòÑÏö∞',
                          answerDate: '',
                          answerer: '',
                          content: 'ÌäπÏ†ï Ìè¥ÎçîÏóê Ï†ëÍ∑ºÌï† Ïàò ÏóÜÏäµÎãàÎã§.'
                        },
                        {
                          id: '10',
                          inquiryDate: '2025.08.30 14:00',
                          title: 'Ïù∏ÏáÑ ÎåÄÍ∏∞Ïó¥ Ïò§Î•ò',
                          inquirer: 'ÏûÑÏßÄÏòÅ',
                          answerDate: '2025.08.30 14:30',
                          answerer: 'ÍπÄÍ∏∞Ïà†',
                          content: 'ÌîÑÎ¶∞ÌÑ∞ ÎåÄÍ∏∞Ïó¥Ïóê Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
                          answerContent: 'Ïù∏ÏáÑ ÎåÄÍ∏∞Ïó¥ÏùÑ Ï¥àÍ∏∞ÌôîÌïòÍ≥† ÌîÑÎ¶∞ÌÑ∞Î•º Ïû¨ÏãúÏûëÌï¥ Ï£ºÏÑ∏Ïöî.'
                        },
                        {
                          id: '11',
                          inquiryDate: '2025.08.30 13:00',
                          title: 'ÏãúÏä§ÌÖú ÏóÖÎç∞Ïù¥Ìä∏ Î¨∏Ïùò',
                          inquirer: 'Î∞ïÏ§ÄÌò∏',
                          answerDate: '',
                          answerer: '',
                          content: 'ÏãúÏä§ÌÖú ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÌïÑÏöîÌïúÏßÄ ÌôïÏù∏ÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.'
                        },
                        {
                          id: '12',
                          inquiryDate: '2025.08.30 12:00',
                          title: 'Î∞±ÏóÖ ÏãúÏä§ÌÖú Î¨∏Ïùò',
                          inquirer: 'ÌïúÏÜåÏòÅ',
                          answerDate: '2025.08.30 12:30',
                          answerer: 'Ïù¥Î∞∞Ï†ï',
                          content: 'Î∞±ÏóÖ ÏãúÏä§ÌÖúÏù¥ Ï†ïÏÉÅ ÏûëÎèôÌïòÎäîÏßÄ ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.',
                          answerContent: 'Î∞±ÏóÖ ÏãúÏä§ÌÖúÏùÑ Ï†êÍ≤ÄÌïú Í≤∞Í≥º Ï†ïÏÉÅ ÏûëÎèôÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏùºÏ†ïÌïú ÏãúÍ∞ÑÏóê ÏûêÎèô Î∞±ÏóÖÏù¥ ÏßÑÌñâÎê©ÎãàÎã§.'
                        }
                      ];

                      // ÌïÑÌÑ∞ÎßÅÎêú Îç∞Ïù¥ÌÑ∞
                      let filteredInquiries = inquiries;
                      
                      // ÎØ∏ ÎãµÎ≥ÄÎßå Ï°∞Ìöå ÌïÑÌÑ∞
                      if (showUnansweredOnly) {
                        filteredInquiries = inquiries.filter(inquiry => !inquiry.answerDate);
                      }

                      // ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ (Í∞ÑÎã®Ìïú ÏòàÏãú)
                      const startDate = new Date(generalInquirySearchStartDate);
                      const endDate = new Date(generalInquirySearchEndDate);
                      filteredInquiries = filteredInquiries.filter(inquiry => {
                        const inquiryDate = new Date(inquiry.inquiryDate);
                        return inquiryDate >= startDate && inquiryDate <= endDate;
                      });

                      // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
                      const itemsPerPage = 10;
                      const totalPages = Math.ceil(filteredInquiries.length / itemsPerPage);
                      const startIndex = (generalInquiryCurrentPage - 1) * itemsPerPage;
                      const endIndex = startIndex + itemsPerPage;
                      const currentInquiries = filteredInquiries.slice(startIndex, endIndex);

                      return (
                        <>
                          {currentInquiries.map((inquiry) => (
                            <tr key={inquiry.id} className="hover:bg-gray-50">
                              <td className="px-2 py-2 text-gray-900 text-center">{inquiry.inquiryDate}</td>
                              <td className="px-2 py-2 text-gray-900">{inquiry.title}</td>
                              <td className="px-2 py-2 text-gray-900 text-center">{inquiry.inquirer}</td>
                              <td className="px-2 py-2 text-gray-900 text-center">{inquiry.answerDate || '-'}</td>
                              <td className="px-2 py-2 text-gray-900 text-center">
                                <div className="flex items-center justify-center">
                                  {inquiry.answerer && <Icon name="lock" size={16} className="text-gray-400 mr-1" />}
                                  {inquiry.answerer || '-'}
                                </div>
                              </td>
                              <td className="px-2 py-2 text-center">
                                <div className="flex justify-center space-x-2">
                                  {inquiry.answerDate ? (
                                    <>
                                      <button
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          setSelectedInquiry(inquiry);
                                          setShowGeneralInquiryEditModal(true);
                                        }}
                                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                      >
                                        ÏàòÏ†ï
                                      </button>
                                      <button
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          setSelectedInquiry(inquiry);
                                          setShowGeneralInquiryDeleteModal(true);
                                        }}
                                        className="text-red-600 hover:text-red-800 text-sm font-medium"
                                      >
                                        ÏÇ≠Ï†ú
                                      </button>
                                    </>
                                  ) : (
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        setSelectedInquiry(inquiry);
                                        setShowGeneralInquiryReplyModal(true);
                                      }}
                                      className="text-green-600 hover:text-green-800 text-sm font-medium"
                                    >
                                      ÎãµÎ≥ÄÌïòÍ∏∞
                                    </button>
                                  )}
                                </div>
                              </td>
                            </tr>
                          ))}
                        </>
                      );
                    })()}
                  </tbody>
                </table>
              </div>

              {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
              {(() => {
                // ÎèôÏùºÌïú Îç∞Ïù¥ÌÑ∞ÏôÄ ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ ÏÇ¨Ïö©
                const inquiries = [
                  { id: '1', inquiryDate: '2025.08.31 14:00', title: 'Î™®ÎãàÌÑ∞ Ï†ÑÏõê Î¨∏Ïùò', inquirer: 'ÌôçÍ∏∏Ïàú', answerDate: '2025.08.31 15:00', answerer: 'Ïù¥Î∞∞Ï†ï' },
                  { id: '2', inquiryDate: '2025.08.31 13:00', title: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ïùò', inquirer: 'ÍπÄÏòÅÏûê', answerDate: '', answerer: '' },
                  { id: '3', inquiryDate: '2025.08.31 12:00', title: 'ÌîÑÎ¶∞ÌÑ∞ ÎìúÎùºÏù¥Î≤Ñ ÏóÖÎç∞Ïù¥Ìä∏', inquirer: 'Ïù¥ÏòÅÌù¨', answerDate: '', answerer: '' },
                  { id: '4', inquiryDate: '2025.08.31 11:00', title: 'Ïù¥Î©îÏùº Î¨∏Ïùò', inquirer: 'Î∞ïÎã¨Ïûê', answerDate: '2025.08.31 12:00', answerer: 'Ïù¥Î∞∞Ï†ï' },
                  { id: '5', inquiryDate: '2025.08.31 10:00', title: 'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÏÑ§Ïπò ÏöîÏ≤≠', inquirer: 'ÏµúÎØºÏàò', answerDate: '', answerer: '' },
                  { id: '6', inquiryDate: '2025.08.31 09:30', title: 'ÌÇ§Î≥¥Îìú Í≥†Ïû• Î¨∏Ïùò', inquirer: 'Ï†ïÏàòÏßÑ', answerDate: '2025.08.31 10:30', answerer: 'ÍπÄÍ∏∞Ïà†' },
                  { id: '7', inquiryDate: '2025.08.31 09:00', title: 'ÏõπÏÇ¨Ïù¥Ìä∏ Ï†ëÏÜç Î∂àÍ∞Ä', inquirer: 'Í∞ïÏßÄÌõà', answerDate: '', answerer: '' },
                  { id: '8', inquiryDate: '2025.08.30 16:30', title: 'ÎßàÏö∞Ïä§ Î∞òÏùë ÏßÄÏó∞', inquirer: 'Ïú§ÏÑúÏó∞', answerDate: '2025.08.30 17:00', answerer: 'Ïù¥Î∞∞Ï†ï' },
                  { id: '9', inquiryDate: '2025.08.30 15:00', title: 'Ìè¥Îçî Í∂åÌïú Î¨∏Ïùò', inquirer: 'ÏÜ°ÌòÑÏö∞', answerDate: '', answerer: '' },
                  { id: '10', inquiryDate: '2025.08.30 14:00', title: 'Ïù∏ÏáÑ ÎåÄÍ∏∞Ïó¥ Ïò§Î•ò', inquirer: 'ÏûÑÏßÄÏòÅ', answerDate: '2025.08.30 14:30', answerer: 'ÍπÄÍ∏∞Ïà†' },
                  { id: '11', inquiryDate: '2025.08.30 13:00', title: 'ÏãúÏä§ÌÖú ÏóÖÎç∞Ïù¥Ìä∏ Î¨∏Ïùò', inquirer: 'Î∞ïÏ§ÄÌò∏', answerDate: '', answerer: '' },
                  { id: '12', inquiryDate: '2025.08.30 12:00', title: 'Î∞±ÏóÖ ÏãúÏä§ÌÖú Î¨∏Ïùò', inquirer: 'ÌïúÏÜåÏòÅ', answerDate: '2025.08.30 12:30', answerer: 'Ïù¥Î∞∞Ï†ï' }
                ];
                
                let filteredInquiries = inquiries;
                if (showUnansweredOnly) {
                  filteredInquiries = inquiries.filter(inquiry => !inquiry.answerDate);
                }
                
                // ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ
                const startDate = new Date(generalInquirySearchStartDate);
                const endDate = new Date(generalInquirySearchEndDate);
                filteredInquiries = filteredInquiries.filter(inquiry => {
                  const inquiryDate = new Date(inquiry.inquiryDate);
                  return inquiryDate >= startDate && inquiryDate <= endDate;
                });
                
                const totalPages = Math.ceil(filteredInquiries.length / 10);
                
                return totalPages > 1 ? (
                  <div className="flex justify-center mt-4 pt-4 pb-4 border-t border-gray-200">
                    <div className="flex items-center space-x-2">
                      <button 
                        onClick={() => setGeneralInquiryCurrentPage(Math.max(1, generalInquiryCurrentPage - 1))}
                        disabled={generalInquiryCurrentPage === 1}
                        className="px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded text-xs disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        Ïù¥Ï†Ñ
                      </button>
                      <span className="px-2 py-1 bg-blue-500 text-white rounded text-xs">
                        {generalInquiryCurrentPage}/{totalPages}
                      </span>
                      <button 
                        onClick={() => setGeneralInquiryCurrentPage(Math.min(totalPages, generalInquiryCurrentPage + 1))}
                        disabled={generalInquiryCurrentPage >= totalPages}
                        className="px-2 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded text-xs disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        Îã§Ïùå
                      </button>
                    </div>
                  </div>
                ) : null;
              })()}
            </div>
          </div>
        </div>
      )}

      {/* ÎãµÎ≥ÄÌïòÍ∏∞ ÌîÑÎ†àÏûÑ */}
      {showGeneralInquiryReplyModal && selectedInquiry && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="message-square" size={24} className="mr-2 text-green-600" />
                ÎãµÎ≥Ä ÌïòÍ∏∞
              </h2>
              <button
                onClick={() => setShowGeneralInquiryReplyModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Î¨∏Ïùò Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">Î¨∏Ïùò Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏Ïùò ÏùºÏãú: </span>
                      <span className="text-sm">{selectedInquiry.inquiryDate}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏ÏùòÏûê: </span>
                      <span className="text-sm">{selectedInquiry.inquirer}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏Ïùò ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedInquiry.content}
                      </div>
                    </div>
                  </div>
                </div>

                {/* ÎãµÎ≥Ä ÏûëÏÑ± */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="edit" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÎãµÎ≥Ä ÌïòÍ∏∞</h3>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ÎãµÎ≥Ä ÎÇ¥Ïö©
                      </label>
                      <textarea
                        rows={8}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                        placeholder="ÎãµÎ≥Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        defaultValue="ÎÑ§Ìä∏ÏõåÌÅ¨ ÏºÄÏù¥Î∏îÏù¥ Ï†ïÌôïÌûà ÍºΩÌòÄ ÏûàÎäîÏßÄ ÌôïÏù∏ Ìï¥ Ï£ºÏÑ∏Ïöî!"
                      />
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">ÎãµÎ≥ÄÏûê: </span>
                      <span className="text-sm">Ïù¥Î∞∞Ï†ï (Í¥ÄÎ¶¨ÌåÄ)</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowGeneralInquiryReplyModal(false)}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={() => {
                  setShowGeneralInquiryReplyModal(false);
                  // ÎãµÎ≥Ä ÏôÑÎ£å Î°úÏßÅ Ï∂îÍ∞Ä
                  alert('ÎãµÎ≥ÄÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
                }}
                className="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÎãµÎ≥Ä ÌïòÍ∏∞
              </button>
            </div>
          </div>
        </div>
      )}
      {/* ÎãµÎ≥ÄÏàòÏ†ïÌïòÍ∏∞ ÌîÑÎ†àÏûÑ */}
      {showGeneralInquiryEditModal && selectedInquiry && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="edit" size={24} className="mr-2 text-blue-600" />
                ÎãµÎ≥Ä ÏàòÏ†ïÌïòÍ∏∞
              </h2>
              <button
                onClick={() => setShowGeneralInquiryEditModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Î¨∏Ïùò Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">Î¨∏Ïùò Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏Ïùò ÏùºÏãú: </span>
                      <span className="text-sm">{selectedInquiry.inquiryDate}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏ÏùòÏûê: </span>
                      <span className="text-sm">{selectedInquiry.inquirer}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏Ïùò ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedInquiry.content}
                      </div>
                    </div>
                  </div>
                </div>

                {/* ÎãµÎ≥Ä ÏàòÏ†ï */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="edit" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÎãµÎ≥Ä ÏàòÏ†ï</h3>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ÎãµÎ≥Ä ÎÇ¥Ïö©
                      </label>
                      <textarea
                        rows={8}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                        placeholder="ÎãµÎ≥Ä ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        defaultValue={selectedInquiry.answerContent || "Î™®ÎãàÌÑ∞ Ï†ÑÏõê ÏºÄÏù¥Î∏îÎ•º ÌïúÎ≤à Îçî ÍºΩÏïÑ Ï£ºÏÑ∏Ïöî! Î™®ÎãàÌÑ∞ Ï†ÑÏõê Î≤ÑÌäºÏùÑ Ïºú Ï£ºÏã≠ÏãúÏöî Ïù¥ÏÉÅÍ≥º Í∞ôÏù¥ Ï°∞ÏπòÍ∞Ä ÎêòÏßÄ ÏïäÏùÑ Îî∞Îäî ÏÑúÎπÑÏä§ Ïã†Ï≤≠ Ìï¥ Ï£ºÏÑ∏Ïöî!"}
                      />
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">ÎãµÎ≥ÄÏûê: </span>
                      <span className="text-sm">Ïù¥Î∞∞Ï†ï (Í¥ÄÎ¶¨ÌåÄ)</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowGeneralInquiryEditModal(false)}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={() => {
                  setShowGeneralInquiryEditModal(false);
                  // ÏàòÏ†ï ÏôÑÎ£å Î°úÏßÅ Ï∂îÍ∞Ä
                  alert('ÎãµÎ≥ÄÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
                }}
                className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÏàòÏ†ï ÌïòÍ∏∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÎãµÎ≥ÄÏÇ≠Ï†úÌïòÍ∏∞ ÌîÑÎ†àÏûÑ */}
      {showGeneralInquiryDeleteModal && selectedInquiry && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 modal-enter">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200" style={{paddingTop: '30px'}}>
              <h2 className="text-xl font-bold text-gray-800 flex items-center">
                <Icon name="trash" size={24} className="mr-2 text-red-600" />
                ÎãµÎ≥Ä ÏÇ≠Ï†úÌïòÍ∏∞
              </h2>
              <button
                onClick={() => setShowGeneralInquiryDeleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Icon name="close" size={24} />
              </button>
            </div>

            {/* Î™®Îã¨ ÎÇ¥Ïö© */}
            <div className="py-6 px-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Î¨∏Ïùò Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="user" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">Î¨∏Ïùò Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-0">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏Ïùò ÏùºÏãú: </span>
                      <span className="text-sm">{selectedInquiry.inquiryDate}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏ÏùòÏûê: </span>
                      <span className="text-sm">{selectedInquiry.inquirer}</span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Î¨∏Ïùò ÎÇ¥Ïö©: </span>
                      <div className="text-sm mt-1 p-3 bg-gray-50 rounded text-gray-700 min-h-24 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedInquiry.content}
                      </div>
                    </div>
                  </div>
                </div>

                {/* ÎãµÎ≥Ä Ï†ïÎ≥¥ */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-4">
                    <Icon name="edit" size={20} className="text-gray-600" />
                    <h3 className="text-lg font-semibold text-gray-800">ÎãµÎ≥Ä Ï†ïÎ≥¥</h3>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ÎãµÎ≥Ä ÎÇ¥Ïö©
                      </label>
                      <div className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700 min-h-32 max-h-48 overflow-y-auto whitespace-pre-wrap">
                        {selectedInquiry.answerContent || "Î™®ÎãàÌÑ∞ Ï†ÑÏõê ÏºÄÏù¥Î∏îÎ•º ÌïúÎ≤à Îçî ÍºΩÏïÑ Ï£ºÏÑ∏Ïöî! Î™®ÎãàÌÑ∞ Ï†ÑÏõê Î≤ÑÌäºÏùÑ Ïºú Ï£ºÏã≠ÏãúÏöî Ïù¥ÏÉÅÍ≥º Í∞ôÏù¥ Ï°∞ÏπòÍ∞Ä ÎêòÏßÄ ÏïäÏùÑ Îî∞Îäî ÏÑúÎπÑÏä§ Ïã†Ï≤≠ Ìï¥ Ï£ºÏÑ∏Ïöî!"}
                      </div>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">ÎãµÎ≥ÄÏûê: </span>
                      <span className="text-sm">Ïù¥Î∞∞Ï†ï (Í¥ÄÎ¶¨ÌåÄ)</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Î™®Îã¨ ÌïòÎã® Î≤ÑÌäº */}
            <div className="flex gap-3 py-4 px-6 border-t border-gray-200">
              <button
                onClick={() => setShowGeneralInquiryDeleteModal(false)}
                className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={() => {
                  setShowGeneralInquiryDeleteModal(false);
                  // ÏÇ≠Ï†ú ÏôÑÎ£å Î°úÏßÅ Ï∂îÍ∞Ä
                  alert('ÎãµÎ≥ÄÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                }}
                className="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium transition-all duration-200 button-smooth"
              >
                ÏÇ≠Ï†ú ÌïòÍ∏∞
              </button>
            </div>
          </div>
        </div>
      )}
      {/* Ïï†ÎãàÎ©îÏù¥ÏÖò Ïä§ÌÉÄÏùº */}
      <style jsx>{`
        @keyframes slideInLeft {
          0% {
            opacity: 0;
            transform: translateX(-100px);
          }
          100% {
            opacity: 1;
            transform: translateX(0);
          }
        }
        
        @keyframes slideInBottom {
          0% {
            opacity: 0;
            transform: translateY(100px);
          }
          100% {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes slideInRight {
          0% {
            opacity: 0;
            transform: translateX(100px);
          }
          100% {
            opacity: 1;
            transform: translateX(0);
          }
        }
      `}</style>

    </div>
  )
}

export default ServiceManagerPage;
