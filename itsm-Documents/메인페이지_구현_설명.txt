================================================================================
                    ITSM 프로젝트 - 메인페이지 구현 설명서
================================================================================

📅 작성일: 2025년 1월 11일
🎯 목적: 향후 개발 시 참고용 학습 자료

================================================================================
1. 메인페이지 개요
================================================================================

파일 위치: itsm-frontend/app/page.tsx
기능: ITSM 시스템의 메인 대시보드 및 로그인 인터페이스

주요 특징:
- 반응형 이미지 위치 조정 시스템
- 통합 로그인 모달 (일반사용자 + 기술자)
- 회원가입 모달
- 권한별 라우팅 시스템
- 동적 메뉴 선택 기능

================================================================================
2. 핵심 기능 상세 설명
================================================================================

2.1 동적 이미지 위치 조정 시스템
----------------------------------------
기능: 브라우저 해상도에 따라 원형 이미지들의 위치를 자동 조정

구현 방식:
- useState로 screenWidth 상태 관리
- useEffect로 윈도우 리사이즈 이벤트 감지
- 선형 보간법을 이용한 위치 계산

핵심 코드:
```typescript
const [screenWidth, setScreenWidth] = useState(0);

const baseWidth1920 = 1920;
const basePosition1920 = -896; // 1920px에서 -896px

const calculateDynamicPositionPx = () => {
  if (screenWidth === 0) return basePosition1920;
  const widthDifference = baseWidth1920 - screenWidth;
  const positionAdjustment = widthDifference * 0.5;
  const position = basePosition1920 + positionAdjustment;
  return position;
};
```

계산 공식:
- 1920px 기준: -896px 위치
- 1px 해상도 변경 시: 0.5px씩 좌우 이동
- 예시: 1680px → -896 + (1920-1680) × 0.5 = -776px

2.2 통합 로그인 시스템
----------------------------------------
기능: 일반사용자와 기술자를 위한 통합 로그인 인터페이스

주요 구성요소:
- 이메일/비밀번호 입력 필드
- "로그인 상태 유지" 체크박스
- "비밀번호 찾기" 링크
- "회원가입" 링크
- Tech Login 버튼 (기술자용)

상태 관리:
```typescript
const [showLoginModal, setShowLoginModal] = useState(false);
const [showSignupModal, setShowSignupModal] = useState(false);
const [isTechLogin, setIsTechLogin] = useState(false);
const [keepLoggedIn, setKeepLoggedIn] = useState(false);
```

2.3 회원가입 시스템
----------------------------------------
기능: 신규 사용자 등록 및 유효성 검증

필수 입력 항목:
- 이메일(ID)* - 이메일 형식 검증
- 비밀번호* - 8-16자, 영문+숫자+특수문자 조합
- 성명* - 필수 입력
- 직급* - 필수 입력
- 소속* - 필수 입력
- 연락처* - 전화번호 형식 검증

자동 생성 항목:
- 생성일자: 현재 시간 자동 설정
- 권한: 기본값 "일반사용자"로 설정

유효성 검증:
```typescript
const validateEmail = (email: string) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const validatePassword = (password: string) => {
  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,16}$/;
  return passwordRegex.test(password);
};
```

2.4 권한별 라우팅 시스템
----------------------------------------
기능: 사용자 권한에 따른 자동 페이지 이동

권한별 라우팅:
- system_admin → /system-admin
- service_manager → /service-manager
- technician → /technician
- assignment_manager → /assignment-manager
- 일반사용자 → 선택된 메뉴 페이지로 이동

구현 코드:
```typescript
const handleLogin = () => {
  // 로그인 로직...
  if (user) {
    localStorage.setItem('userRole', user.role);
    if (isTechLogin) {
      switch (user.role) {
        case 'system_admin': router.push('/system-admin'); break;
        case 'service_manager': router.push('/service-manager'); break;
        case 'technician': router.push('/technician'); break;
        case 'assignment_manager': router.push('/assignment-manager'); break;
        default: setLoginError("권한이 없습니다."); return;
      }
    } else {
      if (selectedMenuItem) {
        const menuItem = mainMenuItems.find(item => item.id === selectedMenuItem);
        if (menuItem) { router.push(menuItem.path); }
      }
    }
  }
};
```

================================================================================
3. UI/UX 디자인 특징
================================================================================

3.1 메인 메뉴 시스템
----------------------------------------
구성: 4개의 주요 메뉴 카드
- 요청진행사항
- 서비스신청
- 일반문의사항
- 자주하는질문

상호작용:
- 호버 시 확대 효과 (transform: scale-105)
- 클릭 시 선택 상태 표시
- 선택된 메뉴는 파란색 테두리 표시

3.2 모달 디자인
----------------------------------------
로그인 모달:
- 반투명 배경 (bg-black/50)
- 블러 효과 (backdrop-blur-sm)
- 중앙 정렬 배치
- 반응형 패딩

회원가입 모달:
- 동일한 모달 스타일
- 폼 유효성 검증
- 에러 메시지 표시
- 성공 시 자동 닫기

3.3 반응형 디자인
----------------------------------------
브레이크포인트:
- sm: 640px 이상
- md: 768px 이상
- lg: 1024px 이상

적용 예시:
- 버튼 크기: px-3 py-2 sm:px-4 sm:py-3
- 텍스트 크기: text-sm sm:text-base
- 그리드 레이아웃: grid-cols-1 md:grid-cols-2 lg:grid-cols-3

================================================================================
4. 상태 관리 및 데이터 흐름
================================================================================

4.1 주요 상태 변수
----------------------------------------
```typescript
// UI 상태
const [showLoginModal, setShowLoginModal] = useState(false);
const [showSignupModal, setShowSignupModal] = useState(false);
const [isTechLogin, setIsTechLogin] = useState(false);
const [keepLoggedIn, setKeepLoggedIn] = useState(false);

// 화면 크기
const [screenWidth, setScreenWidth] = useState(0);

// 메뉴 선택
const [selectedMenuItem, setSelectedMenuItem] = useState<string | null>(null);

// 회원가입 폼
const [signupData, setSignupData] = useState({
  email: '', password: '', name: '', position: '', department: '', contact: ''
});

// 에러 처리
const [loginError, setLoginError] = useState('');
const [signupErrors, setSignupErrors] = useState<{[key: string]: string}>({});
```

4.2 데이터 흐름
----------------------------------------
1. 사용자가 메뉴 클릭 → selectedMenuItem 상태 업데이트
2. 로그인 버튼 클릭 → showLoginModal 상태 true
3. 회원가입 링크 클릭 → showSignupModal 상태 true
4. 로그인 성공 → 권한 확인 → 해당 페이지로 라우팅
5. 회원가입 성공 → 자동 로그인 → 메인 페이지로 이동

================================================================================
5. 보안 및 검증
================================================================================

5.1 클라이언트 사이드 검증
----------------------------------------
- 이메일 형식 검증
- 비밀번호 강도 검증 (8-16자, 영문+숫자+특수문자)
- 전화번호 형식 검증
- 필수 필드 검증

5.2 세션 관리
----------------------------------------
- localStorage를 이용한 사용자 정보 저장
- keepLoggedIn 옵션으로 로그인 상태 유지
- 권한별 접근 제어

================================================================================
6. 개발 시 주의사항
================================================================================

6.1 성능 최적화
----------------------------------------
- 윈도우 리사이즈 이벤트에 디바운싱 적용 필요
- 모달 상태 변경 시 불필요한 리렌더링 방지
- 이미지 로딩 최적화

6.2 접근성
----------------------------------------
- 키보드 네비게이션 지원
- 스크린 리더 호환성
- 색상 대비 개선

6.3 확장성
----------------------------------------
- 새로운 권한 추가 시 라우팅 로직 수정 필요
- 메뉴 항목 추가 시 mainMenuItems 배열 수정
- 유효성 검증 규칙 변경 시 검증 함수 수정

================================================================================
7. 향후 개발 방향
================================================================================

7.1 백엔드 연동
----------------------------------------
- 실제 API 엔드포인트 연결
- JWT 토큰 기반 인증
- 서버 사이드 유효성 검증

7.2 기능 확장
----------------------------------------
- 비밀번호 찾기 기능 구현
- 사용자 프로필 관리
- 알림 시스템
- 다국어 지원

7.3 UI/UX 개선
----------------------------------------
- 로딩 상태 표시
- 에러 처리 개선
- 애니메이션 효과 추가
- 다크 모드 지원

================================================================================
8. 파일 구조 및 의존성
================================================================================

주요 파일:
- itsm-frontend/app/page.tsx (메인 페이지)
- itsm-frontend/app/layout.tsx (레이아웃)
- itsm-frontend/app/globals.css (글로벌 스타일)
- itsm-frontend/lib/auth.ts (인증 관련 유틸리티)

의존성:
- Next.js 14+ (App Router)
- React 18+
- Tailwind CSS
- TypeScript

================================================================================
9. 테스트 시나리오
================================================================================

9.1 로그인 테스트
----------------------------------------
- 일반사용자 로그인
- 기술자 로그인 (Tech Login)
- 잘못된 계정 정보 입력
- 로그인 상태 유지 기능

9.2 회원가입 테스트
----------------------------------------
- 정상적인 회원가입
- 필수 필드 누락
- 잘못된 이메일 형식
- 약한 비밀번호 입력

9.3 반응형 테스트
----------------------------------------
- 다양한 화면 크기에서 이미지 위치 확인
- 모바일/태블릿/데스크톱 대응
- 터치 인터페이스 테스트

================================================================================
10. 문제 해결 가이드
================================================================================

10.1 일반적인 문제
----------------------------------------
- 이미지 위치가 계산되지 않는 경우: screenWidth 상태 확인
- 모달이 열리지 않는 경우: 상태 변수 확인
- 라우팅이 작동하지 않는 경우: Next.js router 설정 확인

10.2 디버깅 팁
----------------------------------------
- 브라우저 개발자 도구에서 상태 확인
- console.log로 값 출력하여 디버깅
- 네트워크 탭에서 API 호출 확인

================================================================================
11. 코드 예시 모음
================================================================================

11.1 동적 이미지 위치 조정
----------------------------------------
```typescript
useEffect(() => {
  const handleResize = () => {
    setScreenWidth(window.innerWidth);
  };
  
  handleResize(); // 초기 설정
  window.addEventListener('resize', handleResize);
  
  return () => window.removeEventListener('resize', handleResize);
}, []);
```

11.2 모달 열기/닫기
----------------------------------------
```typescript
const openLoginModal = () => {
  setShowLoginModal(true);
  setIsTechLogin(false);
};

const closeLoginModal = () => {
  setShowLoginModal(false);
  setLoginError('');
};
```

11.3 폼 유효성 검증
----------------------------------------
```typescript
const validateForm = () => {
  const errors: {[key: string]: string} = {};
  
  if (!signupData.email) {
    errors.email = '이메일을 입력해주세요.';
  } else if (!validateEmail(signupData.email)) {
    errors.email = '올바른 이메일 형식을 입력해주세요.';
  }
  
  // ... 다른 필드 검증
  
  setSignupErrors(errors);
  return Object.keys(errors).length === 0;
};
```

================================================================================
12. 마무리
================================================================================

이 메인페이지는 ITSM 시스템의 핵심 진입점으로, 사용자 인증, 권한 관리, 
메뉴 네비게이션의 모든 기능을 통합적으로 제공합니다.

향후 개발 시 이 문서를 참고하여 일관성 있는 개발을 진행하시기 바랍니다.

문서 업데이트: 새로운 기능 추가 시 이 문서도 함께 업데이트해주세요.

================================================================================
작성자: AI Assistant
작성일: 2025-01-11
버전: 1.0
================================================================================
