================================================================================
                    ITSM 프로젝트 - 자주하는질문(FAQ) 페이지 구현 설명서
================================================================================

📅 작성일: 2025년 1월 11일
🎯 목적: 향후 개발 시 참고용 학습 자료
📁 파일 위치: itsm-frontend/app/faq/page.tsx

================================================================================
1. 페이지 개요
================================================================================

1.1 자주하는질문 페이지 특징
----------------------------------------
- 일반사용자를 위한 FAQ 조회 시스템
- 6개 항목씩 2줄로 표시되는 카드 그리드 레이아웃
- 페이지네이션을 통한 대량 데이터 관리
- 모달을 통한 상세 내용 조회
- 반응형 디자인으로 모든 디바이스 지원

1.2 주요 기능
----------------------------------------
- FAQ 목록 조회 및 표시
- 페이지네이션 (6개씩 표시)
- FAQ 상세 내용 모달
- 네비게이션 메뉴 (요청진행사항, 서비스신청, 일반문의사항)
- 사용자 정보 표시
- 로그아웃 기능

1.3 디자인 특징
----------------------------------------
- 배경 이미지와 오버레이 효과
- 카드 기반 UI 디자인
- 호버 효과 및 애니메이션
- 오렌지색 네비게이션 밑줄 효과

================================================================================
2. 페이지 구조 및 레이아웃
================================================================================

2.1 전체 페이지 구조
----------------------------------------
```typescript
return (
  <div className="min-h-screen relative overflow-hidden">
    {/* 배경 이미지 */}
    <div className="absolute inset-0 bg-no-repeat" style={{...}}></div>
    
    {/* 오버레이 */}
    <div className="absolute inset-0 bg-black/40"></div>
    
    {/* 메인 컨텐츠 */}
    <div className="relative z-10 min-h-screen flex flex-col">
      {/* 헤더 */}
      <div className="relative z-20">...</div>
      
      {/* 사용자 정보 및 네비게이션 */}
      <div className="max-w-7xl mx-auto px-6 py-6 w-full">...</div>
      
      {/* FAQ 카드 그리드 */}
      <div className="w-full max-w-6xl mx-auto">...</div>
      
      {/* 페이지네이션 */}
      {totalPages > 1 && (...)}
    </div>
    
    {/* FAQ 상세 모달 */}
    {selectedFAQ && (...)}
  </div>
);
```

2.2 헤더 영역
----------------------------------------
```typescript
<div className="flex justify-between items-center p-8">
  <div className="flex items-center space-x-4">
    <div className="w-12 h-12 bg-white/10 rounded-lg flex items-center justify-center backdrop-blur-sm">
      {/* IT 아이콘 */}
    </div>
    <div className="min-w-0">
      <h1 className="text-3xl font-bold text-white truncate">IT Service Management</h1>
      <p className="text-gray-300 text-sm">통합 IT 서비스 관리 시스템</p>
    </div>
  </div>
  <button onClick={handleLogout} className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
    로그아웃
  </button>
</div>
```

2.3 사용자 정보 및 네비게이션
----------------------------------------
```typescript
<div className="flex items-center justify-between mb-8">
  {/* 사용자 정보 */}
  <div className="bg-white/20 backdrop-blur-sm px-8 py-2 rounded-full -ml-64">
    <span className="text-white font-medium">일반사용자 (이영희)</span>
  </div>
  
  {/* 네비게이션 버튼들 */}
  <div className="flex absolute" style={{left: '50%', transform: 'translateX(-350px)', gap: '170px'}}>
    <button className="text-white/70 hover:text-white transition-all duration-300 relative group">
      <span className="flex items-center space-x-2">
        {/* 아이콘 */}
        <span>요청진행사항</span>
      </span>
      <div className="absolute bottom-[-4px] left-0 w-0 h-2 bg-orange-500 transition-all duration-300 group-hover:w-full"></div>
    </button>
    {/* 다른 버튼들... */}
  </div>
</div>
```

2.4 좌측 설명 영역
----------------------------------------
```typescript
<div className="absolute left-8 top-1/2 transform -translate-y-1/2 z-10">
  <div className="bg-white/10 backdrop-blur-sm p-6 rounded-lg max-w-xs">
    <h2 className="text-2xl font-bold text-white mb-3">자주하는 질문</h2>
    <p className="text-gray-200 leading-relaxed text-sm">
      자주 발생하는 IT 문제에 대한 빠른 해결책을 제공합니다.
      문제 유형을 선택하면 즉시 대응 방안을 확인할 수 있습니다.
    </p>
  </div>
</div>
```

================================================================================
3. FAQ 카드 시스템
================================================================================

3.1 카드 그리드 레이아웃
----------------------------------------
```typescript
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
  {currentFAQs.map((faq) => (
    <div
      key={faq.id}
      onClick={() => handleFAQClick(faq)}
      className="bg-white rounded-xl p-7 cursor-pointer hover:shadow-2xl transition-all duration-300 transform hover:scale-105 flex flex-col h-full"
    >
      {/* 카드 내용 */}
    </div>
  ))}
</div>
```

3.2 카드 내부 구조
----------------------------------------
```typescript
<div className="text-left mb-5 flex-1">
  {/* 아이콘 */}
  <div className="text-5xl mb-3 text-center">{faq.icon}</div>
  
  {/* 제목 */}
  <h3 className="text-xl font-bold text-gray-800 mb-3 text-center">
    {faq.summary}
  </h3>
  
  {/* 내용 */}
  <p className="text-gray-600 leading-relaxed mb-4 line-clamp-2 overflow-hidden">
    {faq.content}
  </p>
</div>

{/* 구분 태그 */}
<div className="flex justify-start items-center mt-auto">
  <span className="text-sm px-4 py-2 rounded-full bg-blue-100 text-blue-800 font-medium">
    {faq.category}
  </span>
</div>
```

3.3 카드 디자인 특징
----------------------------------------
- **Flexbox 레이아웃**: `flex flex-col h-full`로 카드 높이 통일
- **호버 효과**: `hover:scale-105`로 확대 효과
- **그림자 효과**: `hover:shadow-2xl`로 그림자 강화
- **내용 제한**: `line-clamp-2`로 2줄로 제한
- **구분 태그**: 하단에 고정 배치 (`mt-auto`)

================================================================================
4. 데이터 관리 및 상태
================================================================================

4.1 주요 상태 변수
----------------------------------------
```typescript
// 페이지네이션
const [currentPage, setCurrentPage] = useState(1);
const itemsPerPage = 6;

// FAQ 데이터
const [selectedFAQ, setSelectedFAQ] = useState<FAQ | null>(null);

// 사용자 권한
const [isManager, setIsManager] = useState(false);
```

4.2 FAQ 데이터 구조
----------------------------------------
```typescript
interface FAQ {
  id: string;
  icon: string;
  summary: string;
  content: string;
  category: string;
  immediateSolution?: string;
  persistentIssue?: string;
}

const faqs: FAQ[] = [
  {
    id: '1',
    icon: '📧',
    summary: '이메일 접속 불가',
    content: '이메일 서비스에 접속할 수 없는 경우 발생하는 문제입니다.',
    category: '이메일',
    immediateSolution: '1. 네트워크 연결 상태 확인\n2. 브라우저 캐시 삭제\n3. 이메일 서버 상태 확인',
    persistentIssue: '문제가 지속될 경우 IT 지원팀에 문의하세요.'
  },
  // ... 다른 FAQ 항목들
];
```

4.3 페이지네이션 로직
----------------------------------------
```typescript
const totalPages = Math.ceil(faqs.length / itemsPerPage);
const currentFAQs = faqs.slice(
  (currentPage - 1) * itemsPerPage,
  currentPage * itemsPerPage
);
```

================================================================================
5. 네비게이션 시스템
================================================================================

5.1 네비게이션 버튼 구조
----------------------------------------
```typescript
<div className="flex absolute" style={{left: '50%', transform: 'translateX(-350px)', gap: '170px'}}>
  {/* 요청진행사항 */}
  <button className="text-white/70 hover:text-white transition-all duration-300 relative group">
    <span className="flex items-center space-x-2">
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
      </svg>
      <span>요청진행사항</span>
    </span>
    <div className="absolute bottom-[-4px] left-0 w-0 h-2 bg-orange-500 transition-all duration-300 group-hover:w-full"></div>
  </button>
  
  {/* 서비스신청 */}
  <button className="text-white/70 hover:text-white transition-all duration-300 relative group">
    <span className="flex items-center space-x-2">
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      <span>서비스신청</span>
    </span>
    <div className="absolute bottom-[-4px] left-0 w-0 h-2 bg-orange-500 transition-all duration-300 group-hover:w-full"></div>
  </button>
  
  {/* 일반문의사항 */}
  <button className="text-white/70 hover:text-white transition-all duration-300 relative group">
    <span className="flex items-center space-x-2">
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
      </svg>
      <span>일반문의사항</span>
    </span>
    <div className="absolute bottom-[-4px] left-0 w-0 h-2 bg-orange-500 transition-all duration-300 group-hover:w-full"></div>
  </button>
</div>
```

5.2 네비게이션 디자인 특징
----------------------------------------
- **절대 위치**: `position: absolute`로 정확한 위치 제어
- **중앙 기준**: `left: '50%'`로 화면 중앙 기준
- **좌측 이동**: `transform: 'translateX(-350px)'`로 좌측 이동
- **버튼 간격**: `gap: '170px'`로 적절한 간격
- **호버 효과**: 오렌지색 밑줄 애니메이션
- **아이콘**: 각 버튼마다 적절한 아이콘 배치

================================================================================
6. FAQ 상세 모달
================================================================================

6.1 모달 구조
----------------------------------------
```typescript
{selectedFAQ && (
  <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
    <div className="bg-white rounded-lg shadow-xl max-w-lg w-full">
      {/* 모달 헤더 */}
      <div className="flex items-center justify-between p-6 border-b border-gray-200">
        <div className="flex items-center space-x-3">
          <div className="text-4xl">{selectedFAQ.icon}</div>
          <div>
            <h3 className="text-xl font-bold text-gray-800">{selectedFAQ.summary}</h3>
            <span className="text-sm px-3 py-1 rounded-full bg-blue-100 text-blue-800 font-medium">
              {selectedFAQ.category}
            </span>
          </div>
        </div>
        <button
          onClick={() => setSelectedFAQ(null)}
          className="text-gray-400 hover:text-gray-600 transition-colors"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      {/* 모달 내용 */}
      <div className="p-6 space-y-6">
        <div>
          <h4 className="text-lg font-semibold text-gray-800 mb-3">문제 설명</h4>
          <p className="text-gray-600 leading-relaxed">{selectedFAQ.content}</p>
        </div>
        
        {selectedFAQ.immediateSolution && (
          <div>
            <h4 className="text-lg font-semibold text-gray-800 mb-3">즉시 해결</h4>
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <pre className="text-sm text-green-800 whitespace-pre-wrap font-sans">
                {selectedFAQ.immediateSolution}
              </pre>
            </div>
          </div>
        )}
        
        {selectedFAQ.persistentIssue && (
          <div>
            <h4 className="text-lg font-semibold text-gray-800 mb-3">문제가 지속될 경우</h4>
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
              <p className="text-sm text-orange-800">{selectedFAQ.persistentIssue}</p>
            </div>
          </div>
        )}
      </div>
      
      {/* 모달 푸터 */}
      <div className="flex justify-end space-x-3 p-6 border-t border-gray-200">
        <button
          onClick={() => setSelectedFAQ(null)}
          className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
        >
          닫기
        </button>
        <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          도움이 됐어요
        </button>
      </div>
    </div>
  </div>
)}
```

6.2 모달 기능
----------------------------------------
- **FAQ 클릭 시 모달 열기**: `handleFAQClick(faq)` 함수 호출
- **상세 정보 표시**: 문제 설명, 즉시 해결, 지속 시 대응 방안
- **색상 구분**: 즉시 해결(초록), 지속 시 대응(주황)
- **닫기 기능**: X 버튼 또는 닫기 버튼으로 모달 닫기
- **피드백 기능**: "도움이 됐어요" 버튼 (향후 구현)

================================================================================
7. 페이지네이션 시스템
================================================================================

7.1 페이지네이션 구조
----------------------------------------
```typescript
{totalPages > 1 && (
  <div className="flex justify-center items-center space-x-4 mt-2">
    <button
      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
      disabled={currentPage === 1}
      className="px-4 py-2 bg-white/20 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-white/30 transition-colors"
    >
      이전
    </button>
    
    <span className="px-4 py-2 bg-blue-600 text-white rounded-lg">
      {currentPage} / {totalPages}
    </span>
    
    <button
      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
      disabled={currentPage === totalPages}
      className="px-4 py-2 bg-white/20 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-white/30 transition-colors"
    >
      다음
    </button>
  </div>
)}
```

7.2 페이지네이션 특징
----------------------------------------
- **6개씩 표시**: `itemsPerPage = 6`
- **이전/다음 버튼**: 첫 페이지/마지막 페이지에서 비활성화
- **현재 페이지 표시**: "1 / 2" 형식으로 표시
- **호버 효과**: 버튼에 호버 시 배경색 변경
- **비활성화 상태**: `disabled` 속성으로 비활성화

================================================================================
8. 배경 및 시각적 효과
================================================================================

8.1 배경 이미지 시스템
----------------------------------------
```typescript
{/* 메인 배경 이미지 */}
<div
  className="absolute inset-0 bg-no-repeat"
  style={{
    backgroundImage: `url('/image/자주하는질문페이지_배경_이미지.jpg')`,
    backgroundSize: '1920px 1080px',
    backgroundPosition: 'center center'
  }}
></div>

{/* 오버레이 */}
<div className="absolute inset-0 bg-black/40"></div>

{/* 패턴 오버레이 */}
<div className="absolute inset-0 opacity-5">
  <div className="w-full h-full" style={{
    backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
  }}></div>
</div>
```

8.2 시각적 효과
----------------------------------------
- **배경 이미지**: 고정 크기 (1920x1080)로 중앙 배치
- **어두운 오버레이**: `bg-black/40`으로 텍스트 가독성 향상
- **패턴 오버레이**: SVG 패턴으로 텍스처 추가
- **블러 효과**: `backdrop-blur-sm`으로 반투명 요소에 블러 적용

================================================================================
9. 반응형 디자인
================================================================================

9.1 브레이크포인트
----------------------------------------
```css
/* 모바일: 기본 */
.grid-cols-1

/* 태블릿: md (768px 이상) */
.md:grid-cols-2

/* 데스크톱: lg (1024px 이상) */
.lg:grid-cols-3
```

9.2 반응형 요소
----------------------------------------
- **그리드 레이아웃**: 1열 → 2열 → 3열
- **패딩**: `p-4 sm:p-6 lg:p-8`
- **텍스트 크기**: `text-xl sm:text-2xl`
- **간격**: `space-y-3 sm:space-y-4`

================================================================================
10. 이벤트 처리 및 함수
================================================================================

10.1 주요 함수들
----------------------------------------
```typescript
// FAQ 클릭 처리
const handleFAQClick = (faq: FAQ) => {
  setSelectedFAQ(faq);
};

// 로그아웃 처리
const handleLogout = () => {
  localStorage.removeItem('userRole');
  localStorage.removeItem('userName');
  localStorage.removeItem('keepLoggedIn');
  router.push('/');
};

// 페이지 변경 처리
const handlePageChange = (newPage: number) => {
  setCurrentPage(newPage);
};
```

10.2 이벤트 처리
----------------------------------------
- **카드 클릭**: FAQ 상세 모달 열기
- **페이지네이션**: 이전/다음 페이지 이동
- **로그아웃**: 세션 정리 및 메인 페이지 이동
- **모달 닫기**: X 버튼 또는 닫기 버튼 클릭

================================================================================
11. 성능 최적화
================================================================================

11.1 렌더링 최적화
----------------------------------------
- **페이지네이션**: 6개씩만 렌더링하여 성능 향상
- **조건부 렌더링**: 모달은 필요할 때만 렌더링
- **이미지 최적화**: 적절한 크기의 배경 이미지 사용

11.2 메모리 관리
----------------------------------------
- **상태 정리**: 컴포넌트 언마운트 시 상태 초기화
- **이벤트 리스너**: 필요시 이벤트 리스너 정리

================================================================================
12. 접근성 및 사용성
================================================================================

12.1 접근성
----------------------------------------
- **키보드 네비게이션**: 모든 버튼에 키보드 접근 가능
- **스크린 리더**: 적절한 aria-label 및 시맨틱 HTML
- **색상 대비**: 충분한 색상 대비로 가독성 확보

12.2 사용성
----------------------------------------
- **직관적 네비게이션**: 명확한 메뉴 구조
- **피드백**: 호버 효과 및 상태 표시
- **로딩 상태**: 필요시 로딩 인디케이터 표시

================================================================================
13. 테스트 시나리오
================================================================================

13.1 기능 테스트
----------------------------------------
- FAQ 카드 클릭 → 모달 열기
- 페이지네이션 → 이전/다음 페이지 이동
- 모달 닫기 → 모달 닫힘 확인
- 로그아웃 → 메인 페이지 이동

13.2 반응형 테스트
----------------------------------------
- 모바일: 1열 그리드
- 태블릿: 2열 그리드
- 데스크톱: 3열 그리드

13.3 사용성 테스트
----------------------------------------
- 네비게이션 버튼 호버 효과
- 카드 호버 효과
- 모달 애니메이션
- 페이지네이션 상태 표시

================================================================================
14. 향후 개발 계획
================================================================================

14.1 기능 확장
----------------------------------------
- FAQ 검색 기능
- FAQ 카테고리 필터링
- FAQ 평가 시스템
- FAQ 관리자 페이지

14.2 백엔드 연동
----------------------------------------
- API를 통한 FAQ 데이터 관리
- 사용자 피드백 수집
- FAQ 조회 통계
- 실시간 FAQ 업데이트

14.3 UI/UX 개선
----------------------------------------
- 애니메이션 효과 추가
- 다크 모드 지원
- 다국어 지원
- 접근성 개선

================================================================================
15. 문제 해결 가이드
================================================================================

15.1 일반적인 문제
----------------------------------------
- 배경 이미지가 로드되지 않는 경우: 파일 경로 확인
- 모달이 열리지 않는 경우: 상태 변수 확인
- 페이지네이션이 작동하지 않는 경우: 데이터 배열 확인

15.2 디버깅 팁
----------------------------------------
- 브라우저 개발자 도구에서 상태 확인
- console.log로 데이터 출력
- 네트워크 탭에서 이미지 로딩 확인

================================================================================
16. 코드 예시 모음
================================================================================

16.1 FAQ 데이터 구조
----------------------------------------
```typescript
const sampleFAQ: FAQ = {
  id: '1',
  icon: '📧',
  summary: '이메일 접속 불가',
  content: '이메일 서비스에 접속할 수 없는 경우 발생하는 문제입니다.',
  category: '이메일',
  immediateSolution: '1. 네트워크 연결 상태 확인\n2. 브라우저 캐시 삭제\n3. 이메일 서버 상태 확인',
  persistentIssue: '문제가 지속될 경우 IT 지원팀에 문의하세요.'
};
```

16.2 페이지네이션 로직
----------------------------------------
```typescript
const getCurrentPageData = () => {
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  return faqs.slice(startIndex, endIndex);
};
```

16.3 모달 상태 관리
----------------------------------------
```typescript
const [selectedFAQ, setSelectedFAQ] = useState<FAQ | null>(null);

const openModal = (faq: FAQ) => {
  setSelectedFAQ(faq);
};

const closeModal = () => {
  setSelectedFAQ(null);
};
```

================================================================================
17. 마무리
================================================================================

이 자주하는질문 페이지는 ITSM 시스템의 사용자 지원 기능을 담당하는 핵심 페이지로,
직관적인 UI/UX와 효율적인 데이터 관리를 통해 사용자 경험을 향상시킵니다.

향후 개발 시 이 문서를 참고하여 일관성 있는 개발을 진행하시기 바랍니다.

문서 업데이트: 새로운 기능 추가 시 이 문서도 함께 업데이트해주세요.

================================================================================
작성자: AI Assistant
작성일: 2025-01-11
버전: 1.0
================================================================================
